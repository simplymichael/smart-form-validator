{"version":3,"file":"smart-form-validator.js","sources":["../src/error-messages.js","../src/helpers.js","../src/effects/effects-helpers.js","../src/effects/add-bottom-border/index.js","../src/effects/add-validation-status-icons/index.js","../src/effects/toggle-submit-button/index.js","../src/effects/index.js","../src/validators/validator-helpers.js","../src/validators/alphanumeric-validator.js","../src/validators/alpha-validator.js","../src/validators/ascii-text-validator.js","../src/validators/email-validator.js","../src/validators/length-validator.js","../src/validators/number-validator.js","../src/validators/regex-validator.js","../src/validators/required-field-validator.js","../src/validators/index.js","../src/smart-field.js","../src/methods/addField.js","../src/methods/addFields.js","../src/methods/addRule.js","../src/methods/addValidator.js","../src/methods/getEffects.js","../src/methods/getField.js","../src/methods/getFields.js","../src/methods/getValidators.js","../src/methods/removeRule.js","../src/methods/reset.js","../src/methods/toJSON.js","../src/methods/useEffect.js","../src/methods/validate.js","../src/methods/watch.js","../src/methods/index.js","../src/smart-form.js","../src/smart-form-validator.js","../src/index.js"],"sourcesContent":["module.exports = {\n  argNamesAreReserved: \"The following :argNames: are reserved and cannot be used as :argTypes:: \\n:argValues:\",\n  fieldCannotBeEmpty: \"The `:field:` field expects a non-empty :type:\",\n  fieldNotRegistered: \"No field with the specified id (\\\":id:\\\") has been registered on this :element:\",\n  functionParamExpectsType: \"The `:param:` argument expects :type:\",\n  functionParamIsRequired: \"The `:param:` argument is required\",\n  htmlElementExpected: \"The `:param:` argument expects an HTML `:elementType:` element\",\n  noObjectWithSpecifiedKey: \"No :object: with the key `:key:` exists\",\n  noEffectsActive: \"There are no active effects set on this field. \\n\" +\n    \"You can set an effect by calling `useEffect(effect)`\",\n  noValidatorsActive: \"There are no active validators for this field. \" +\n    \"You can do one of the following to fix this issue: \" + \n    \"1. Re-enable any disabled validators by calling `enableValidator(key)` \\n\" + \n    \"2. Add a rule using the `addRule(rule)` method \\n\" +\n    \"3. Add a validator using the `addValidator(key, validator, meta)` method\",\n  objectPropertyCannotBeEmpty: \"The `:prop:` property of the `:object:` object cannot be empty\",\n  objectMustHaveProperty: \"The `:param:` argument must have a `:prop:` property\",\n  objectsMustHaveProperty: \"The `:paramA:` argument must have a `:propA:` property or The `:paramB:` argument must have a `:propB:` property\",\n  objectPropertyShouldHaveType: \"The `:prop:` property of the `:object:` object shoulde be :type:\",\n  objectWithKeyExists: \":object: with key `:key:` already exists\",\n  objectWithKeyExistsCanReplace: \":object: with key `:key:` already exists. Use `:replacer:` to replace it.\",\n  unknownType: \"Unknown :type:: `:typeName:`, allowed :types: are: :allowedTypes:\",\n};","\"use strict\";\n\nconst errorMessages = require(\"./error-messages\");\n\nconst APP_CLASSNAME = \"sfv\";\nconst SMART_FIELD_CLASSNAME = \"sfv-sf\";\nconst DISABLED_FIELD_CLASSNAME = \"sfv-disabled\";\nconst VALID_FIELD_CLASSNAME = \"sfv-ok\";\nconst INVALID_FIELD_CLASSNAME = \"sfv-error\";\n\nconst is = {\n  array: isArray,\n  function: isFunction,\n  number: isNumber,\n  object: isObject,\n  string: isString,\n};\n\nconst object = {\n  clone,\n  cloneAndExtend,\n  has: objectHas,\n};\n\n// eslint-disable-next-line\nmodule.exports = {\r\n  is,\n  object,\n  createListFromArray,\n  generateEffectName,\n  getEffectNames,\n  getValidatorNames,\n  isSubmitBtn,\n  normalizeId,\n  preEffectRegistrationCheck,\n  preValidatorRegistrationCheck,\n  validateId,\n  APP_CLASSNAME,\n  DISABLED_FIELD_CLASSNAME,\n  SMART_FIELD_CLASSNAME,\n  VALID_FIELD_CLASSNAME,\n  INVALID_FIELD_CLASSNAME,\n};\n\nfunction isArray(data) {\n  return Array.isArray(data);\n}\n\nfunction isFunction(data) {\n  return typeof data === \"function\";\n}\n\nfunction isNumber(num) {\n  num = Number(num);\n\n  return typeof num === \"number\" && !Number.isNaN(num);\n}\n\nfunction isObject(data) {\n  return (typeof data === \"object\" && data && !isArray(data));\n}\n\nfunction isString(data) {\n  return typeof data === \"string\";\n}\n\nfunction objectHas(obj, prop) {\n  return Object.prototype.hasOwnProperty.call(obj, prop);\n}\n\nfunction clone(obj) {\n  return isObject(obj) ? Object.assign({}, obj) : obj;\n}\n\nfunction cloneAndExtend(obj, newProps) {\n  if(isObject(obj) && isObject(newProps)) {\n    return Object.assign(clone(obj), newProps);\n  } else {\n    return obj;\n  }\n}\n\nfunction createListFromArray(array, combinator) {\n  if(typeof combinator !== \"string\") {\n    combinator = \"\\t\\n* \";\n  }\n\n  return `${combinator}${array.join(combinator)}`;\n}\n\nfunction generateEffectName(name, namespace) {\n  name = is.string(name) ? name.trim() : \"\";\n  namespace = is.string(namespace) ? namespace.trim() : \"\";\n\n  if(name.length > 0 && namespace.length > 0) {\n    return `${namespace}.${name}`;\n  } else if(name.length > 0) {\n    return name;\n  } else {\n    return \"\";\n  }\n}\n\nfunction getEffectNames(effects) {\n  const effectObjects = Object.values(effects);\n  const effectNames = effectObjects.map(effect => effect.name);\n\n  return effectNames;\n}\n\nfunction getValidatorNames(validators) {\n  return Object.keys(validators);\n}\n\nfunction isSubmitBtn(element) {\n  return element.type === \"submit\" || element.role === \"submit-button\";\n}\n\nfunction normalizeId(id) {\n  return String(id).trim();\n}\n\nfunction preEffectRegistrationCheck(effect, defaultEffectNames) {\n  if(!(is.object(effect))) {\n    throw new TypeError(\n      errorMessages.functionParamExpectsType\n        .replace(\":param:\", \"effect\")\n        .replace(\":type:\", \"an object\")\n    );\n  }\n\n  let { name, meta, valid, invalid } = effect;\n\n  if(!(is.string(name))) {\n    throw new TypeError(\n      errorMessages.functionParamExpectsType\n        .replace(\":param:\", \"effect.name\")\n        .replace(\":type:\", \"a string\")\n    );\n  }\n\n  let namespace = \"\";\n  name = name.trim();\n\n  if(!(is.function(valid))) {\n    throw new TypeError(\n      errorMessages.functionParamExpectsType\n        .replace(\":param:\", \"effect.valid\")\n        .replace(\":type:\", \"a function\")\n    );\n  }\n\n  if(!(is.function(invalid))) {\n    throw new TypeError(\n      errorMessages.functionParamExpectsType\n        .replace(\":param:\", \"effect.invalid\")\n        .replace(\":type:\", \"a function\")\n    );\n  }\n\n  if(is.object(meta) && is.string(meta.namespace)) {\n    namespace = meta.namespace.trim();\n  }\n\n  const effectName = generateEffectName(name, namespace);\n\n  if(effectName.length === 0) {\n    throw new TypeError(\n      errorMessages.fieldCannotBeEmpty\n        .replace(\":field:\", \"effect.name\")\n        .replace(\":type:\", \"string\")\n    );\n  }\n\n  if(defaultEffectNames.includes(effectName)) {\n    throw new TypeError(\n      errorMessages.argNamesAreReserved\n        .replace(\":argNames:\", \"names\")\n        .replace(\":argTypes:\", \"effect names\")\n        .replace(\":argValues:\", createListFromArray(defaultEffectNames))\n    );\n  }\n\n  return { ...effect, name: effectName };\n}\n\nfunction preValidatorRegistrationCheck(validatorKey, validatorFn, validatorMeta, defaultValidatorKeys) {\n  if(!(is.string(validatorKey))) {\n    throw new TypeError(\n      errorMessages.functionParamExpectsType\n        .replace(\":param:\", \"validatorKey\")\n        .replace(\":type:\", \"a string\")\n    );\n  }\n\n  let validatorNamespace = \"\";\n\n  validatorKey = validatorKey.trim();\n\n  if(!validatorKey) {\n    throw new TypeError(\n      errorMessages.fieldCannotBeEmpty\n        .replace(\":field:\", \"validatorKey\")\n        .replace(\":type:\", \"string\"));\n  }\n\n  if(is.object(validatorMeta) && is.string(validatorMeta.namespace)) {\n    validatorNamespace = validatorMeta.namespace.trim();\n  }\n\n  validatorKey = generateValidatorKey(validatorKey, validatorNamespace);  \n\n  if(defaultValidatorKeys.includes(validatorKey)) {\n    throw new TypeError(\n      errorMessages.argNamesAreReserved\n        .replace(\":argNames:\", \"keys\")\n        .replace(\":argTypes:\", \"validator keys\")\n        .replace(\":argValues:\", createListFromArray(defaultValidatorKeys))\n    );\n  }\n\n  if(!(is.function(validatorFn))) {\n    throw new TypeError(\n      errorMessages.functionParamExpectsType\n        .replace(\":param:\", \"validatorFn\")\n        .replace(\":type:\", \"a function\")\n    );\n  }\n\n  return validatorKey;\n}\n\nfunction validateId(id) {\n  return [\"number\", \"string\"].includes(typeof id) && Boolean(id);\n}\n\n\n// Helpers \nfunction generateValidatorKey(key, namespace) {\n  if(key.length > 0 && namespace.length > 0) {\n    return `${namespace}.${key}`;\n  } else if(key.length > 0) {\n    return key;\n  } else {\n    return \"\";\n  }\n}","const { is } = require(\"../helpers\");\n\n\nmodule.exports = {\n  isSubmitButton,\n};\n\n\nfunction isSubmitButton(element) {\n  return (\n    is.object(element) && (element.type === \"submit\" || element.role === \"submit-button\")\n  );\n}","const { is, VALID_FIELD_CLASSNAME, INVALID_FIELD_CLASSNAME } = require(\"../../helpers\");\nconst { isSubmitButton } = require(\"../effects-helpers\");\n\nmodule.exports = {\n  name: \"addBottomBorder\",\n  meta: {},\n  valid: handleValid,\n  invalid: handleInvalid,\n};\n\nfunction handleValid(field) {\n  if(!(is.object(field)) || isSubmitButton(field)) {\n    return;\n  }\n\n  field.classList.remove(INVALID_FIELD_CLASSNAME);\n  field.classList.add(VALID_FIELD_CLASSNAME);\n}\n  \nfunction handleInvalid(field) {\n  if(!(is.object(field)) || isSubmitButton(field)) {\n    return;\n  }\n\n  field.classList.remove(VALID_FIELD_CLASSNAME);\n  field.classList.add(INVALID_FIELD_CLASSNAME);\n}","const { is, VALID_FIELD_CLASSNAME, INVALID_FIELD_CLASSNAME } = require(\"../../helpers\");\nconst { isSubmitButton } = require(\"../effects-helpers\");\n\n\nmodule.exports = {\n  name: \"addValidationStatusIcons\",\n  meta: {},\n  valid: handleValid,\n  invalid: handleInvalid,\n};\n\n\nfunction handleValid(field) {\n  if(!(is.object(field)) || isSubmitButton(field)) {\n    return;\n  }\n\n  field.classList.remove(INVALID_FIELD_CLASSNAME);\n  field.classList.add(VALID_FIELD_CLASSNAME);\n}\n  \nfunction handleInvalid(field) {\n  if(!(is.object(field)) || isSubmitButton(field)) {\n    return;\n  }\n\n  field.classList.remove(VALID_FIELD_CLASSNAME);\n  field.classList.add(INVALID_FIELD_CLASSNAME);\n}","const { APP_CLASSNAME, DISABLED_FIELD_CLASSNAME } = require(\"../../helpers\");\nconst { isSubmitButton } = require(\"../effects-helpers\");\n\n\nmodule.exports = {\n  name: \"toggleSubmitButton\",\n  meta: {},\n  init,\n  valid: handleValid,\n  invalid: handleInvalid,\n};\n\n\nfunction init(field) {\n  // Initially disable the submit button\n  canSubmitForm(false, field);\n}\n\nfunction handleValid(field) {\n  canSubmitForm(true, field);\n}\n  \nfunction handleInvalid(field) {\n  canSubmitForm(false, field);\n}\n\n\n// Helper methods\nfunction canSubmitForm(validationPassed, input) {\n  try {\n    if(!isSubmitButton(input)) {\n      return;\n    }\n\n    const submitBtn = input;\n\n    if(validationPassed) {\n      submitBtn.removeAttribute(\"disabled\");\n      submitBtn.classList.remove(APP_CLASSNAME);\n      submitBtn.classList.remove(DISABLED_FIELD_CLASSNAME);\n    } else {\n      submitBtn.setAttribute(\"disabled\", true);\n      submitBtn.classList.add(APP_CLASSNAME);\n      submitBtn.classList.add(DISABLED_FIELD_CLASSNAME);\n    }\n  } catch(e) {\n    console.log(\"Unable to modify the submit button state: \", e.message);\n  }\n}\n","module.exports = {\n  addBottomBorder: require(\"./add-bottom-border\"),\n  addValidationStatusIcons: require(\"./add-validation-status-icons\"),\n  toggleSubmitButton: require(\"./toggle-submit-button\"),\n};","const { is, object } = require(\"../helpers\");\n\nconst regexRules = [\"g\", \"m\"];\n\nmodule.exports = {\n  createAlphanumericRegexObject,\n  getLengthRegex,\n  getRegexRules,\n};\n\nfunction createAlphanumericRegexObject(regexStr, rule, emptyLengthCharacter) {\n  let lenRegex;\n  \n  if(rule.length) {\n    lenRegex = getLengthRegex(rule.length);\n  } else {\n    lenRegex = emptyLengthCharacter || \"+\";\n  }\n  \n  regexStr = `${regexStr}${lenRegex}`;\n  regexStr = `^${regexStr}$`;\n  \n  return new RegExp(regexStr, getRegexRules(rule.matchCase));\n}\n  \nfunction getLengthRegex(lengthRule) {\n  let regexStr;\n  const len = object.clone(lengthRule) || {};\n  \n  if(len.min && len.max) {\n    if(Number(len.min) > Number(len.max)) {\n      const tmp = len.min;\n  \n      len.min = len.max;\n      len.max = tmp;\n    }\n  \n    regexStr = `{${len.min},${len.max}}`;\n  } else if(len.min) {\n    regexStr = `{${len.min},}`;\n  } else if(len.max) {\n    regexStr = `{0,${len.max}}`;\n  } else if(is.number(len)) {\n    regexStr = `{0,${len}}`;\n  }\n  \n  return regexStr;\n}\n  \nfunction getRegexRules(matchCase) {\n  if(matchCase) {\n    return regexRules.join(\"\");\n  } else {\n    return [...regexRules, \"i\"].join(\"\");\n  }\n}","const { createAlphanumericRegexObject } = require(\"./validator-helpers\");\n\n/**\n* Validate that a string contains only alphanumeric characters, _ (underscore), or - (hyphen). \n* @param {String} value (required): The string to validate\n* @param {Object} rule (required): Object containing the requirements for the value to be valid.\n* @param {String} [rule.type]: the expected type of the value.\n* @param {Boolean} [rule.allowWhitespace] (optional): specifies whether to allow whitespace or not.\n* @param {Boolean} [rule.matchCase]: true for case-sensitive validation, false for case-insensitive validation.\n* @returns {Boolean}\n*/\nmodule.exports = function alphanumericValidator(value, rule) {\n  if(!rule.type || rule.type !== \"alnum\") {\n    return true; // if the \"alnum\" rule has not been defined for this value, bypass this validator\n  }\n\n  if(!value) {\n    return false;\n  }\n\n  const regexStr = rule.allowWhitespace ? \"[A-Z0-9\\\\s_-]\" : \"[A-Z0-9_-]\";\n  const regex = createAlphanumericRegexObject(regexStr, rule);\n\n  return regex.test(value);\n};","const { createAlphanumericRegexObject } = require(\"./validator-helpers\");\n\n/**\n * Validate that a string contains only the characters A - Z, _ (underscore), or - (hyphen). \n * @param {String} value (required): The string to validate\n * @param {Object} rule (required): Object containing the requirements for the value to be valid.\n * @param {String} [rule.type]: the expected type of the value.\n * @param {Boolean} [rule.allowWhitespace] (optional): specifies whether to allow whitespace or not.\n * @param {Boolean} [rule.matchCase]: true for case-sensitive validation, false for case-insensitive validation.\n * @returns {Boolean}\n */\nmodule.exports = function alphaValidator(value, rule) {\n  if(!rule.type || rule.type !== \"alpha\") {\n    return true; // if the \"alpha\" rule has not been defined for this value, bypass this validator\n  }\n\n  if(!value || typeof value !== \"string\") {\n    return false;\n  }\n  \n  const regexStr = rule.allowWhitespace ? \"[A-Z\\\\s_-]\" : \"[A-Z_-]\";\n  const regex = createAlphanumericRegexObject(regexStr, rule);\n  \n  return regex.test(value);\n};","const { createAlphanumericRegexObject } = require(\"./validator-helpers\");\n\n/**\n * Validate that a string contains only ascii text characters. \n * @param {String} value (required): The string to validate\n * @param {Object} rule (required): Object containing the requirements for the value to be valid.\n * @param {String} [rule.type]: the expected type of the value.\n * @param {Boolean} [rule.matchCase]: true for case-sensitive validation, false for case-insensitive validation.\n * @returns {Boolean}\n */\nmodule.exports = function asciiTextValidator(value, rule) {\n  if(!rule.type || rule.type !== \"ascii\") {\n    return true; // if the \"ascii\" rule has not been defined for this value, bypass this validator\n  }\n\n  if(!value) {\n    return false;\n  }\n  \n  const regexStr = \"[A-Z0-9`~!@#$%^&*()-+=\\\\[\\\\]{}\\\\\\\\;:'\\\"|<>?\\\\,\\\\.?\\\\/\\\\s_-]\"; // \\\\\\\\ = support for backward slash\n  const regex = createAlphanumericRegexObject(regexStr, rule);\n  \n  return regex.test(value);\n};","// Credits: https://github.com/manishsaraan/email-validator/blob/master/index.js\n//\n// Thanks to:\n// http://fightingforalostcause.net/misc/2006/compare-email-regex.php\n// http://thedailywtf.com/Articles/Validating_Email_Addresses.aspx\n// http://stackoverflow.com/questions/201323/what-is-the-best-regular-expression-for-validating-email-addresses/201378#201378\n// https://en.wikipedia.org/wiki/Email_address  The format of an email address is local-part@domain, where the \n// local part may be up to 64 octets long and the domain may have a maximum of 255 octets.[4]\n//\n\nconst regex = /^[-!#$%&'*+/0-9=?A-Z^_a-z`{|}~](\\.?[-!#$%&'*+/0-9=?A-Z^_a-z`{|}~])*@[a-zA-Z0-9](-*\\.?[a-zA-Z0-9])*\\.[a-zA-Z](-?[a-zA-Z0-9])+$/;\n\n/**\n * Validate that a string is an email.\n * @param {String} value (required): The value to validate\n * @param {Object} rule (required): Object containing the requirements for the value to be valid.\n * @param {String} [rule.type]: the expected type of the value.\n * @returns {Boolean}\n */\nmodule.exports = function emailValidator(value, rule) {\n  if(!rule.type || rule.type !== \"email\") {\n    return true; // if the \"email\" rule has not been defined for this value, bypass this validator\n  }\n\n  if(!value || typeof value !== \"string\") {\n    return false;\n  }\n  \n  const emailParts = value.split(\"@\");\n  \n  if(emailParts.length !== 2) {\n    return false;\n  }\n  \n  const [account, address] = emailParts;\n  \n  if(account.length > 64 || address.length > 255) {\n    return false;\n  }\n  \n  const domainParts = address.split(\".\");\n    \n  if(domainParts.some(part => part.length > 63)) {\n    return false;\n  }\n  \n  return regex.test(value);\n};","const { is } = require(\"../helpers\");\nconst { createAlphanumericRegexObject } = require(\"./validator-helpers\");\n\n/**\n * Validate that a string conforms to the passed length requirements.\n * @param {String} value (required): The value to validate\n * @param {Object} rule (required): Object containing the requirements for the value to be valid.\n * @param {Number|Object} [rule.length] (required): The length requirements.\n * @param {Number} [rule.length.min] (optional): minimum length requirement.\n * @param {Number} [rule.length.max] (optional): maximum length requirement.\n * @returns {Boolean}\n */\nmodule.exports = function lengthValidator(value, rule) {\n  if(!(is.number(rule.length)) && !(is.object(rule.length))) {\n    return true; // If the length rule has not been defined for the value, bypass this validator\n  }\n\n  if(typeof value === \"undefined\" || value === null || value === false) {\n    return false;\n  }\n  \n  const regexStr = \"[A-Z0-9.\\\\s_-]\";\n  const regex = createAlphanumericRegexObject(regexStr, rule, \"*\");\n  \n  return regex.test(value);\n};","const { createAlphanumericRegexObject } = require(\"./validator-helpers\");\n\n/**\n * Validate that a value contains only numbers. \n * @param {Number|String} value (required): The string to validate\n * @param {Object} rule (required): Object containing the requirements for the value to be valid.\n * @param {String} [rule.type]: The expected type of the value.\n * @param {Boolean} [rule.allowWhitespace] (optional): specifies whether to allow whitespace or not.\n * @returns {Boolean}\n */\nmodule.exports = function numberValidator(value, rule) {\n  if(!rule.type || rule.type !== \"number\") {\n    return true; // If the \"number\" rule has not been specified for this value, bypass this validator.\n  }\n\n  if(value === \"\" || value === null || typeof value === \"undefined\") {\n    return false;\n  }\n  \n  const regexStr = rule.allowWhitespace ? \"[0-9\\\\s]\" : \"[0-9]\";\n  const regex = createAlphanumericRegexObject(regexStr, rule);\n  \n  return regex.test(value);\n};","const { is } = require(\"../helpers\");\n\n\n/**\n * Validate a value according to provided custom regular expression.\n * @param {Mixed} value (required): The value to validate\n * @param {Object} rule (required): Object containing the requirements for the value to be valid.\n * @param {Object|String} [rule.regex]: A regex string or a regex object.\n * @returns {Boolean}\n */\nmodule.exports = function regexValidator(value, rule) {\n  if(!rule.regex) {\n    return true; // if the regex rule has not been defined for this value, bypass this validator\n  }\n\n  const { regex: regexStr } = rule;\n  const regex = is.object(regexStr) ? regexStr : new RegExp(regexStr);\n  \n  return regex.test(value);\n};","/**\n * Validate that a value is not empty, that is, not undefined. \n * @param {String} value (required): The value to validate\n * @param {Object} rule (required): Object containing the requirements for the value to be valid.\n * @param {Boolean} [rule.required]: Dictates whether or not the value is required.\n * @param {Boolean} prevResult (optional);\n * @param {Object} extras\n * @param {Boolean} [extras.checked] (optional): if the value is of a checkbox, .\n * @returns {Boolean}\n */\nmodule.exports = function requiredFieldValidator(value, rule, _, extras) {\n  if(!rule.required) {\n    return true; // bypass this validation if no rule has been specified for it.\n  }\n\n  if(value === \"\" || typeof value === \"undefined\") {\n    return false;\n  }\n  \n  let passed;\n  \n  switch(rule.type) {\n  case \"checkbox\" : passed = extras.checked && value === \"on\"; break;\n  default         : passed = value.length > 0; break;\n  }\n  \n  return passed;\n};","module.exports = {\n  alphanumericValidator: require(\"./alphanumeric-validator\"),\n  alphaValidator: require(\"./alpha-validator\"),\n  asciiTextValidator: require(\"./ascii-text-validator\"),\n  emailValidator: require(\"./email-validator\"),\n  lengthValidator: require(\"./length-validator\"),\n  numberValidator: require(\"./number-validator\"),\n  regexValidator: require(\"./regex-validator\"),\n  requiredFieldValidator: require(\"./required-field-validator\"),\n};\n","\"use strict\";\r\n\r\nconst effects = require(\"./effects\");\r\nconst errorMessages = require(\"./error-messages\");\r\nconst { \r\n  APP_CLASSNAME,  \r\n  DISABLED_FIELD_CLASSNAME,\r\n  SMART_FIELD_CLASSNAME,\r\n  VALID_FIELD_CLASSNAME,\r\n  INVALID_FIELD_CLASSNAME,\r\n  is,\r\n  object,\r\n  generateEffectName,\r\n  getEffectNames,\r\n  getValidatorNames,\r\n  preEffectRegistrationCheck,\r\n  preValidatorRegistrationCheck,\r\n  isSubmitBtn,\r\n  normalizeId,\r\n  validateId,\r\n} = require(\"./helpers\");\r\nconst defaultValidators = require(\"./validators\");\r\n\r\nconst defaultEffects = Object.values(effects);\r\nconst defaultEffectNames = getEffectNames(effects);\r\nconst defaultValidatorFunctions = Object.entries(defaultValidators);\r\nconst defaultValidatorKeys = getValidatorNames(defaultValidators); //Object.keys(defaultValidators);\r\n\r\n\r\nmodule.exports = SmartField;\r\n\r\n\r\n/**\r\n * Create a new SmartField object.\r\n * @param {Object} element: the element to create a SmartField instance from;\r\n * @param {String} [element.id] (required): the id of the element \r\n * @param {String} [element.role] (optional): the role of the element. \r\n *    This can be particularly usefule for identifying submit buttons that are not defined \r\n *    as `<input type=\"submit\" />`. In such cases, if we want effects that work with submit buttons \r\n *    to have access to the button, we have to give the element a role of \"submit-button\", e.g. \r\n *    `<button role=\"submit-button\">Submit</button>`.\r\n * @param {Function} [element.getValue] (optional): A function to get the element's value.\r\n *    The function should return the element's value when called.\r\n *    If the element is an HTML element such as `input`, `select`, `checkbox`, or a contenteditable field, \r\n *    this property is optional, and the element's value can be retrieved automatically. \r\n *    For other types of elements, this value is required for getting the element's value during validation.\r\n * @param {Object} rule (optional): object specifying the validation rules to apply to this instance.\r\n * @param {Boolean} [rule.required]: specifies whether the field is required (true) or not (false)\r\n * @param {Number|Object} [rule.length]: specifies the accepted input length. \r\n *    If the value is a number, it specifies the maximum length.\r\n *    If the value is an object, it specifies. the minimum and/or maximum length.\r\n * @param {Number} [rule.length.min]: specifies the mininum accepted input length\r\n * @param {Number} [rule.length.max]: specifies the maximum accepted input length\r\n * @param {Boolean} [rule.matchCase]: performs a case-sensitive (true) or case-insensitive (false) validation.\r\n * @param {String} [rule.type]: the acceptable data type of the value  for this field (alnum|alpha|ascii|email|number).\r\n *    Default is alnum.\r\n * @param {String} [rule.regex]: specifies a custom validation regex.\r\n * \r\n * @returns this\r\n * \r\n * Before the field can have any validation performed on it, a rule must be added to it\r\n * either durinc initialization or by calling the addRule(rule) method on the instance.\r\n */\r\nfunction SmartField(element, rule) {\r\n  if(!is.object(element)) {\r\n    throw new TypeError(\r\n      errorMessages.functionParamExpectsType\r\n        .replace(\":param:\", \"element\")\r\n        .replace(\":type:\", \"object\")\r\n    );\r\n  }\r\n\r\n  if(!validateId(element.id) && !isSubmitBtn(element)) {\r\n    throw new TypeError(\r\n      errorMessages\r\n        .objectPropertyShouldHaveType\r\n        .replace(\":prop:\", \"id\")\r\n        .replace(\":object:\", \"element\")\r\n        .replace(\":type:\", \"a string or a number\")\r\n    );\r\n  }\r\n\r\n  if(normalizeId(element.id).length === 0 && !isSubmitBtn(element)) {\r\n    throw new TypeError(\r\n      errorMessages\r\n        .objectPropertyCannotBeEmpty\r\n        .replace(\":prop:\", \"id\")\r\n        .replace(\":object:\", \"element\")\r\n    );\r\n  }\r\n\r\n  if(typeof element.getValue !== \"undefined\" && typeof element.getValue !== \"function\") {\r\n    throw new TypeError(\r\n      errorMessages\r\n        .objectPropertyShouldHaveType\r\n        .replace(\":prop:\", \"getValue\")\r\n        .replace(\":object:\", \"element\")\r\n        .replace(\":type:\", \"a function\")\r\n    );\r\n  }\r\n\r\n  if(isSubmitBtn(element)) {\r\n    this.role = \"submit-button\";\r\n  }\r\n\r\n  this.id = element.id;\r\n  this.element = element;\r\n  this.defaultEffects = new Map();\r\n  this.defaultValidators = new Map(defaultValidatorFunctions);\r\n  this.effects = new Map();\r\n  this.validators = new Map();\r\n\r\n  for(const effect of defaultEffects) {\r\n    const { name, meta, init, valid, invalid } = effect;\r\n\r\n    this.defaultEffects.set(name, { meta, init, valid, invalid });\r\n\r\n    if(is.function(init)) {\r\n      init(this.element);\r\n    }\r\n  }\r\n\r\n  if(is.object(rule)) {\r\n    this.addRule({ ...rule, fieldId: element.id });\r\n  }\r\n\r\n  claimField(element);\r\n}\r\n\r\n/**\r\n * Add a new rule to a SmartField instance or update the existing rule for the instance.\r\n * @param {Object} rule: Object containing the requirements for the field's value to be valid.\r\n * @param {Boolean} [rule.required]: (for checkbox, dropdown, and text fields): determines if the field is required.\r\n * @param {Number|Object} [rule.length]: specify the accepted input length. \r\n *    If the value is a number, it specifies the maximum length.\r\n *    If the value is an object, it specifies the minimum and/or maximum length.\r\n * @param {Number} [rule.length.min]: specifies the mininum accepted input length\r\n * @param {Number} [rule.length.max]: specifies the maximum accepted input length\r\n * @param {Boolean} [rule.allowWhitespace]: specifies if white-space characters are allowed.\r\n * @param {Boolean} [rule.matchCase]: performs a case-sensitive (true) or case-insensitive(false) validation.\r\n * @param {String} [rule.type]: the input field's expected data type (alnum|alpha|ascii|email|number|text).\r\n *    Default is alnum.\r\n * @param {String} [rule.regex]: specifies a custom validation regex\r\n * @param {Boolean} replace (optional): replace the existing rule completely with the new rule.\r\n *    This will not only overwrite a specific key, but replace the entire previous `rule` object.\r\n * \r\n * @returns this\r\n * \r\n */\r\nSmartField.prototype.addRule = function addRule(rule) {\r\n  const existingRule = this.rule;\r\n  \r\n  if(is.object(existingRule) && is.object(rule)) {\r\n    this.rule = object.cloneAndExtend(existingRule, rule);\r\n  } else {\r\n    this.rule = rule;\r\n  }\r\n  \r\n  return this;\r\n};\r\n\r\n/**\r\n * Delete the rule for this instance.\r\n * @param {String} key (optional): If specified, delete only the specified rule.\r\n * Otherwise, delete the entire rule object for this instance.\r\n * \r\n * @returns this\r\n */\r\nSmartField.prototype.removeRule = function removeRule(key) {\r\n  const existingRule = this.rule;\r\n\r\n  if(!is.object(existingRule)) {\r\n    return this;\r\n  }\r\n  \r\n  if(key) {\r\n    delete this.rule[key];\r\n  } else {\r\n    delete this.rule;\r\n  }\r\n\r\n  return this;\r\n};\r\n\r\n/**\r\n * Get the rule object associated with this field\r\n * @param {String} key (optional): get specific rule by key.\r\n * @return {Boolean|Object|String|Undefined}\r\n */\r\nSmartField.prototype.getRule = function getRule(key) {\r\n  if(key && this.rule) {\r\n    return typeof this.rule[key] !== \"undefined\" ? this.rule[key] : null;\r\n  } else {\r\n    return this.rule || null;\r\n  }\r\n};\r\n\r\n/**\r\n * getEffect:  retrieves an effect attached to this field by name.\r\n * \r\n * @param {String} name (required)\r\n * @param {String} namespace (optional)\r\n * @returns {Boolean}\r\n */\r\nSmartField.prototype.getEffect = function getEffect(name, namespace) {\r\n  name = is.string(name) ? name.trim().toLowerCase() : \"\";\r\n  namespace = is.string(namespace) ? namespace.trim().toLowerCase() : \"\";\r\n\r\n  const effectName = generateEffectName(name, namespace);\r\n\r\n  if(this.effects.has(effectName)) {\r\n    return this.effects.get(effectName);\r\n  } else {\r\n    return null;\r\n  }\r\n};\r\n\r\n/**\r\n * @param {String} type (optional): \"addon\"|\"default\".\r\n * @returns {Object} with members: `default` and/or `addon`.\r\n */\r\nSmartField.prototype.getEffects = function getActiveEffects(type) {\r\n  type = is.string(type) ? type.toLowerCase().trim() : \"\";\r\n\r\n  const effects = {\r\n    default: this.defaultEffects,\r\n    addon: this.effects,\r\n  };\r\n\r\n  if([\"addon\", \"default\"].includes(type)) {\r\n    return effects[type];\r\n  } else {\r\n    return effects;\r\n  }\r\n};\r\n\r\n/**\r\n * \r\n * @param {Object} effect: \r\n * @param {String} [effect.name] (required): The name of this effect, used when registering the effect.\r\n * @param {Function} [effects.init] (optional): Function that performs any initialization function.\r\n *    The function is invoked right after the effect is registered.\r\n *    It receives the current input field as its first argument.\r\n * @param {Function} [effect.valid] (required): Function to invoke post-validation if the field is valid.\r\n *    The function receives the validated input field as its first argument.\r\n * @param {Function} [effect.invalid] (required): Function to invoke post-validation if the field is invalid.\r\n *    The function is passed the validated input field as its first argument\r\n * @param {Object} [effect.meta] (optional): Effect meta data, e.g., namespace, author, version, etc.\r\n * @param {String} [effect.meta.namespace]: used in conjunction with the effect `name` \r\n *    to create a unique name for the effect.\r\n * @returns this.\r\n */\r\nSmartField.prototype.useEffect = function useEffect(effect) {\r\n  const parsedEffect = preEffectRegistrationCheck(effect, defaultEffectNames);\r\n\r\n  let { name: effectName, meta, init, valid, invalid } = parsedEffect;\r\n\r\n  if(this.usesEffect(effectName)) {\r\n    throw new TypeError(\r\n      errorMessages.objectWithKeyExists\r\n        .replace(\":object:\", \"An effect\")\r\n        .replace(\":key:\", effectName)\r\n    );\r\n  }\r\n\r\n  this.effects.set(effectName, { meta, init, valid, invalid });\r\n\r\n  if(is.function(init)) {\r\n    init(this.getElement());\r\n  }\r\n\r\n  return this;\r\n};\r\n\r\n/**\r\n * usesEffect: checks whether the field has any effects attached to.\r\n * If the `name` (and/or `namespace`) parameter is supplied, \r\n * checks if the field has the named effect attached.\r\n * \r\n * @param {String} name (optional)\r\n * @param {String} namespace (optional)\r\n * @returns {Boolean}\r\n */\r\nSmartField.prototype.usesEffect = function usesEffect(name, namespace) {\r\n  if(is.string(name)) {\r\n    name = name.trim().toLowerCase();\r\n    namespace = is.string(namespace) ? namespace.trim().toLowerCase() : \"\";\r\n\r\n    const effectName = generateEffectName(name, namespace);\r\n\r\n    return this.effects.has(effectName);\r\n  } else {\r\n    return this.effects.size > 0;\r\n  }\r\n};\r\n\r\n/**\r\n * Add a validator to the list of validators for this field.\r\n * \r\n * @param {String} validatorKey (required): The identifier for the validator.\r\n * @param {Function} validatorFn (required): A function that validates the field.\r\n *    The function is passed the following arguments in order: \r\n *       - `value`: the value entered by the user for this field\r\n *       - `rule`: the rule defined for this field instance\r\n *       - `prevResult`: a Boolean value indicating the result of previous validators.\r\n *       - `extras`: object containing any other field-specific information, \r\n *             like the \"checked\" state for checkboxes, etc.\r\n *    The function should return Boolean true or false to indicate if the validation passed.\r\n * @param {Object} validatorMeta (optional): Object containing validator metadata (namespace, author, etc.)\r\n * @param {String} [validatorMeta.namespace]: namespace of the validator. \r\n *    This is appended to the key to prevent naming conflicts.\r\n * @returns this.\r\n */\r\nSmartField.prototype.addValidator = function addValidator(validatorKey, validatorFn, validatorMeta) {\r\n  validatorKey = preValidatorRegistrationCheck(validatorKey, validatorFn, validatorMeta, defaultValidatorKeys);\r\n\r\n  if(this.hasValidator(validatorKey)) {\r\n    throw new TypeError(\r\n      errorMessages.objectWithKeyExists\r\n        .replace(\":object:\", \"A validator\")\r\n        .replace(\":key:\", validatorKey)\r\n    );\r\n  }\r\n\r\n  this.validators.set(validatorKey, validatorFn);\r\n\r\n  return this;\r\n};\r\n\r\n/**\r\n * @param {String} type (optional): \"addon\"|\"default\".\r\n * @returns {Object} with members: `default` and/or `addon`.\r\n */\r\nSmartField.prototype.getValidators = function getValidators(type) {\r\n  type = is.string(type) ? type.toLowerCase().trim() : \"\";\r\n\r\n  const validators = {\r\n    default: this.defaultValidators,\r\n    addon: this.validators,\r\n  };\r\n\r\n  if([\"addon\", \"default\"].includes(type)) {\r\n    return validators[type];\r\n  } else {\r\n    return validators;\r\n  }\r\n};\r\n\r\nSmartField.prototype.hasValidator = function hasValidator(validatorKey) {\r\n  if(is.string(validatorKey)) {\r\n    validatorKey = validatorKey.trim().toLowerCase();\r\n  }\r\n\r\n  return (\r\n    is.string(validatorKey)\r\n      ? this.validators.has(validatorKey) \r\n      : this.validators.size > 0\r\n  );\r\n};\r\n\r\n/**\r\n * Get the original input field passed to the constructor\r\n * @returns \r\n */\r\nSmartField.prototype.getElement = function getElement() { \r\n  return this.element;\r\n};\r\n\r\n/**\r\n * Get the value entered by the user for this field\r\n * @returns {String|Mixed}\r\n */\r\nSmartField.prototype.getValue = function getValue() {\r\n  let value;\r\n  let input = this.getElement();\r\n\r\n  if(typeof input.getValue === \"function\") {\r\n    value = input.getValue();\r\n  } else if(input.type?.toLowerCase() === \"checkbox\") {\r\n    value = input.value;\r\n  } else if(input.tagName?.toLowerCase() === \"select\") {\r\n    value = getHtmlSelectElementSelectedOption(input)?.value?.trim();\r\n  } else if(typeof input.value !== \"undefined\") {\r\n    value = input.value;\r\n  } else if(input.isContentEditable && typeof input.textContent !== \"undefined\") {\r\n    value = input.textContent;\r\n  }\r\n\r\n  return ( is.string(value) ? value.trim() : value );\r\n};\r\n\r\n/**\r\n * @returns {Boolean}\r\n */\r\nSmartField.prototype.validate = function validate() {\r\n  const { default: defaultValidators, addon: addonValidators } = this.getValidators();\r\n  const validators = Array.from(defaultValidators.values()).concat(Array.from(addonValidators.values()));\r\n\r\n  if(validators.length === 0) {\r\n    throw new TypeError(errorMessages.noValidatorsActive);\r\n  }\r\n\r\n  const { default: defaultEffects, addon: addonEffects } = this.getEffects();\r\n  const effects = Array.from(defaultEffects.values()).concat(Array.from(addonEffects.values()));\r\n\r\n  if(effects.length === 0) {\r\n    throw new TypeError(errorMessages.noEffectsActive);\r\n  }\r\n\r\n  let rule = this.getRule();\r\n  const input = this.getElement();\r\n  const value = this.getValue();\r\n  const extras = {};\r\n\r\n  if(rule.required && input.type === \"checkbox\") {\r\n    extras.checked = input.checked;\r\n  }\r\n\r\n  const validationPassed = validators.reduce((passed, fn) => passed && fn(value, rule, passed, extras), true);\r\n\r\n  effects.forEach(function invokeValidationResultEffect({ valid, invalid }) {\r\n    if(validationPassed) {\r\n      valid(input);\r\n    } else {\r\n      invalid(input);\r\n    }\r\n  });\r\n\r\n  return validationPassed;\r\n};\r\n\r\n/**\r\n * Start Listening for \"input\" events and perform validation\r\n * @param {Function} callback: A function to invoke on validation complete.\r\n *   The function will be passed the input field and the result (Boolean) of the validation.\r\n */\r\nSmartField.prototype.watch = function watch(callback) {\r\n  const input = this.getElement();\r\n  let targetEvent;\r\n  \r\n  switch(input.type) {\r\n  case \"checkbox\" : targetEvent = \"click\"; break;\r\n  case \"email\"    :\r\n  case \"password\" : \r\n  case \"text\"     : \r\n  default         : targetEvent = \"input\"; break;\r\n  }\r\n  \r\n  input.addEventListener(targetEvent, () => this.validate(_, callback)); // eslint-disable-line\r\n};\r\n\r\nSmartField.prototype.reset = function reset() {\r\n  const element = this.getElement();\r\n  const { default: defaultEffects, addon: addonEffects } = this.getEffects();\r\n  const effects = Array.from(defaultEffects.values()).concat(Array.from(addonEffects.values()));\r\n\r\n  element.classList.remove(APP_CLASSNAME);\r\n  element.classList.remove(DISABLED_FIELD_CLASSNAME);\r\n  element.classList.remove(SMART_FIELD_CLASSNAME);\r\n  element.classList.remove(VALID_FIELD_CLASSNAME);\r\n  element.classList.remove(INVALID_FIELD_CLASSNAME);\r\n\r\n  claimField(element);\r\n\r\n  if(effects.length > 0) {\r\n    effects.forEach(function reInitEffect(effect) {\r\n      if(is.function(effect.init)) {\r\n        effect.init(element);\r\n      }\r\n    });\r\n  }\r\n};\r\n\r\n\r\n// Helpers\r\n\r\nfunction getHtmlSelectElementSelectedOption(selectElement) {\r\n  return {\r\n    value : selectElement.value,\r\n    text  : selectElement.options[selectElement.selectedIndex].text,\r\n  };\r\n}\r\n\r\nfunction claimField(input) {\r\n  input.classList?.add(APP_CLASSNAME);\r\n  input.classList?.add(SMART_FIELD_CLASSNAME);\r\n}","const errorMessages = require(\"../error-messages\");\nconst { is, isSubmitBtn, normalizeId, validateId } = require(\"../helpers\");\nconst SmartField = require(\"../smart-field\");\n\n/**\n * Add a new field for validation\n * @param {Object|String} input: the field to validate. The field must have an `id` property.\n *    This can be the HTML element itself if we already have it, or its ID.\n * @param {String} [input.id] (required): the id of the element \n * @param {String} [input.role] (optional): the role of the element. \n *    This can be particularly useful for identifying submit buttons that are not defined \n *    as `<input type=\"submit\" />`. In such cases, if we want effects that work with submit buttons \n *    to have access to the button, we have to give the element a role of \"submit-button\", e.g. \n *    `<button role=\"submit-button\">Submit</button>`.\n * @param {Object} rule (optional): object containing validation rules for this field.\n * @param {Boolean} [rule.required]: specifies whether the field is required (true) or not (false)\n * @param {Number|Object} [rule.length]: specifies the accepted input length. \n *   If the value is a number, it specifies the maximum length. \n *   If the value is an object, it specifies the minimum and/or maximum length.\n * @param {Number} [rule.length.min]: specifies the mininum accepted input length\n * @param {Number} [rule.length.max]: specifies the maximum accepted input length\n * @param {Boolean} [rule.matchCase]: performs case-sensitive (true) or case-insensitive (false) validation.\n * @param {String} [rule.type]: the field's expected data type (alnum|alpha|email|number|text).\n *    Default is alnum.\n * @param {String} [rule.regex]: specifies a custom validation regex\n * @returns this\n */\nmodule.exports = function addField(input, rule) {\n  if(typeof input === \"string\") {\n    input = document.getElementById(input);\n  }\n\n  if(!is.object(input)) {\n    throw new TypeError(\n      errorMessages.functionParamExpectsType\n        .replace(\":param:\", \"input\")\n        .replace(\":type:\", \"object\")\n    );\n  }\n  \n  if(!validateId(input.id) && !isSubmitBtn(input)) {\n    throw new TypeError(\n      errorMessages.objectPropertyShouldHaveType\n        .replace(\":prop:\", \"id\")\n        .replace(\":object:\", \"input\")\n        .replace(\":type:\", \"a string or a number\")\n    );\n  }\n  \n  const field = this.getField(normalizeId(input.id));\n  \n  if(field) {\n    if(is.object(rule)) {\n      rule.field = input.id;\n  \n      this.addRule(rule);\n    }\n  } else {\n    this.fields.push(new SmartField(input, rule));\n  }\n    \n  return this;\n};","const { is } = require(\"../helpers\");\n\n/**\n * Add an array of new fields for validation.\n * @param {Array} fields: the fields to validate. \n * @param {Object} [fields[i].field]: An object holding the input field to validate, must have an `id` property.\n * @param {String} [fields[i].field.id]: The id of the input field\n * @param {Object} [fields[i].rule]: (optional): object containing validation rules for this field.\n * @param {Boolean} [fields[i].rule.required]: specifies whether the field is required (true) or not (false)\n * @param {Number|Object} [fields[i].rule.length]: specifies the accepted input length. \n *   If the value is a number, it specifies the maximum length. \n *   If the value is an object, it specifies the minimum and/or maximum length.\n * @param {Number} [fields[i].rule.length.min]: specifies the mininum accepted input length\n * @param {Number} [fields[i].rule.length.max]: specifies the maximum accepted input length\n * @param {Booleean} [fields[i].rule.allowWhitespace]\n * @param {Boolean} [fields[i].rule.matchCase]: performs case-sensitive (true) or case-insensitive (false) validation.\n * @param {String} [fields[i].rule.type]: the field's expected data type (alnum|alpha|email|number|text).\n *    Default is alnum.\n * @param {String} [fields[i].rule.regex]: specifies a custom validation regex\n * @returns this\n * \n * Only fields that have rules added to them will be considered for validation.\n */\nmodule.exports = function addFields(fields) {\n  if(is.array(fields) && fields.length > 0) {\n    fields.forEach(field => this.addField(field.field, field.rule));\n  }\n\n  return this;\n};","const errorMessages = require(\"../error-messages\");\nconst { is, object } = require(\"../helpers\");\n\n\n/**\n * Add a validation rule to a previuosly created field.\n * @param {Object} rule: object\n * @param {Object|String} [rule.field]: the field to apply the rule to. This can be the element itself or its id.\n * @param {Boolean} [rule.required]: specifies whether the field is required (true) or not (false)\n * @param {Number|Object} [rule.length]: specifies the accepted input length. \n *    If the value is a number, it specifies the maximum length.\n *    If the value is an object, it specifies the minimum and/or maximum accepted length.\n * @param {Number} [rule.length.min]: specify the mininum accepted input length\n * @param {Number} [rule.length.max]: specify the maximum accepted input length\n * @param {Boolean} [rule.allowWhitespace]: specifies if white-space characters are allowed.\n * @param {Boolean} [rule.matchCase]: performs a case-sensitive (true) or case-insensitive (false) validation\n * @param {String} [rule.type]: the input field's expected data type (alnum|alpha|email|number|text).\n *    Default is alnum.\n * @param {String} [rule.regex]: specifies a custom validation regex\n * @returns this\n */\nmodule.exports = function addRule(rule) {\n  if(!is.object(rule)) {\n    throw new TypeError(\n      errorMessages.functionParamExpectsType\n        .replace(\":param:\", \"rule\")\n        .replace(\":type:\", \"object\")\n    );\n  }\n  \n  if(!object.has(rule, \"field\")) {\n    throw new TypeError(\n      errorMessages.objectMustHaveProperty\n        .replace(\":param:\", \"rule\")\n        .replace(\":prop:\", \"field\")\n    );\n  }\n  \n  const fieldId = is.object(rule.field) ? rule.field.id : rule.field;\n  const field = this.getField(fieldId);\n  \n  if(!field) {\n    throw new TypeError(\n      errorMessages.fieldNotRegistered\n        .replace(\":element:\", \"validator\")\n        .replace(\":id:\", fieldId)\n    );\n  }\n  \n  field.addRule(rule);\n  \n  return this;\n};\n  ","const errorMessages = require(\"../error-messages\");\nconst { getValidatorNames, preValidatorRegistrationCheck } = require(\"../helpers\");\nconst defaultValidators = require(\"../validators\");\n\nconst defaultValidatorKeys = getValidatorNames(defaultValidators); //Object.keys(defaultValidators);\n\n\nmodule.exports = function addValidator(validatorKey, validatorFn, validatorMeta) {\n  this.validators = this.validators || {};\n  \n  validatorKey = preValidatorRegistrationCheck(validatorKey, validatorFn, validatorMeta, defaultValidatorKeys);\n  \n  if(this.validators[validatorKey]) {\n    throw new TypeError(\n      errorMessages.objectWithKeyExists\n        .replace(\":object:\", \"A validator\")\n        .replace(\":key:\", validatorKey)\n    );\n  }\n  \n  this.validators[validatorKey] = validatorFn;\n  \n  // Add the effect to the elements attached to the instance.\n  if(typeof this.getFields === \"function\") {\n    this.getFields().forEach(field => {\n      if(!(field.hasValidator(validatorKey))) {\n        field.addValidator(validatorKey, validatorFn, validatorMeta);\n      }\n    });\n  }\n};\n","const effects = require(\"../effects\");\nconst { is } = require(\"../helpers\");\n\nconst defaultEffects = {};\n\nfor(const effect of Object.values(effects)) {\n  const { name, meta, init, valid, invalid } = effect;\n\n  defaultEffects[name] = { meta, init, valid, invalid };\n}\n\n/**\n * @param {String} type (optional): \"addon\"|\"default\".\n * @returns {Object} with members: `default` and/or `addon`.\n */\nmodule.exports = function getEffects(type) {\n  type = is.string(type) ? type.trim().toLowerCase() : \"\";\n\n  const addonEffects = this.effects || null;\n\n  if([\"addon\", \"default\"].includes(type)) {\n    switch(type) {\n    case \"default\": return defaultEffects;\n    case \"addon\"  : return addonEffects;\n    }\n  } else {\n    return {\n      default: defaultEffects,\n      addon: addonEffects,\n    };\n  }\n};\n","const { normalizeId } = require(\"../helpers\");\n\n\nmodule.exports = function getField(fieldId) {\n  return this.getFields().find(field => normalizeId(field.id) === normalizeId(fieldId)) || null;\n};","/**\n * Get all fields\n * @returns {Array}\n */\nmodule.exports = function getFields() {\n  return this.fields;\n};","const validators = require(\"../validators\");\nconst { is } = require(\"../helpers\");\n\nconst defaultValidators = {};\n\nfor(const [key, validator] of Object.entries(validators)) {\n  defaultValidators[key] = validator;\n}\n\n/**\n * @param {String} type (optional): \"addon\"|\"default\".\n * @returns {Object} with members: `default` and/or `addon`.\n */\nmodule.exports = function getValidator(type) {\n  type = is.string(type) ? type.trim().toLowerCase() : \"\";\n\n  const addonValidators = this.validators || null;\n\n  if([\"addon\", \"default\"].includes(type)) {\n    switch(type) {\n    case \"default\": return defaultValidators;\n    case \"addon\"  : return addonValidators;\n    }\n  } else {\n    return {\n      default: defaultValidators,\n      addon: addonValidators,\n    };\n  }\n};\n","const { is } = require(\"../helpers\");\n\n\n/**\n * \n * @param {Number|String} element: the field whose rule we want to delete. This can be the underlying element or its id.\n * @param {String} key (optional): the key of the rule we want to delete. \n *    If not specified, the entire rule for the field is deleted.\n *    This means no more validation will take place for that field.\n * @returns this\n */\nmodule.exports = function removeRule(element, key) {\n  const fieldId = is.object(element) ? element.id : element;\n  const field = this.getField(fieldId);\n  \n  if(field) {\n    field.removeRule(key);\n  }\n  \n  return this;\n};","module.exports = function reset() {\r\n  if(typeof this.getFields === \"function\") {\r\n    this.getFields().forEach(function resetField(field) {\r\n      field.reset();\r\n    });\r\n  }\r\n};","/**\n * Support JSON.stringify\n * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON/stringify\n */\nmodule.exports = function toJSON() {\n  return this.getFields();\n};","const effects = require(\"../effects\");\r\nconst errorMessages = require(\"../error-messages\");\r\nconst { getEffectNames, preEffectRegistrationCheck } = require(\"../helpers\");\r\n\r\nconst defaultEffectNames = getEffectNames(effects);\r\n\r\n/**\r\n * @param {Object} effect: \r\n * @param {String} [effect.name] (required): The name of this effect, used when registering the effect.\r\n * @param {Function} [effects.init] (optional): Function that performs any initialization function.\r\n *    The function is invoked right after the effect is registered.\r\n *    It receives the current input field as its first argument.\r\n * @param {Function} [effect.valid] (required): Function to invoke post-validation if the field is valid.\r\n *    The function receives the validated input field as its first argument.\r\n * @param {Function} [effect.invalid] (required): Function to invoke post-validation if the field is invalid.\r\n *    The function is passed the validated input field as its first argument\r\n * @param {Object} [effect.meta] (optional): Effect meta data, e.g., namespace, author, version, etc.\r\n * @param {String} [effect.meta.namespace]: used in conjunction with the effect `name` \r\n *    to create a unique name for the effect.\r\n * @returns this.\r\n */\r\nmodule.exports = function useEffect(effect) {\r\n  this.effects = this.effects || {};\r\n\r\n  const parsedEffect = preEffectRegistrationCheck(effect, defaultEffectNames);\r\n\r\n  let { name: effectName, meta, init, valid, invalid } = parsedEffect;\r\n\r\n  if(this.effects[effectName]) {\r\n    throw new TypeError(\r\n      errorMessages.objectWithKeyExists\r\n        .replace(\":object:\", \"An effect\")\r\n        .replace(\":key:\", effectName)\r\n    );\r\n  }\r\n\r\n  this.effects[effectName] = { meta, init, valid, invalid };\r\n\r\n  // Add the effect to the elements attached to the instance.\r\n  if(typeof this.getFields === \"function\") {\r\n    this.getFields().forEach(function registerEffectForField(field) {\r\n      if(!(field.usesEffect(effect.name, effect.meta?.namespace))) {\r\n        field.useEffect(effect);\r\n      }\r\n    });\r\n  }\r\n};","const { isSubmitBtn } = require(\"../helpers\");\r\n\r\n\r\n/**\r\n * @returns {Boolean}: the overall result of the entire validation\r\n */\r\nmodule.exports = function validate() {\r\n  const fields = this.getFields();\r\n  const targetFields = fields.filter(function filterOutSubmitButton(field) {\r\n    return !isSubmitBtn(field.getElement());\r\n  });\r\n\r\n  const validated = targetFields.map(function validateField(field) {\r\n    return field.validate();\r\n  });\r\n  \r\n  return validated.every(function fieldPassedValidation(passed) {\r\n    return Boolean(passed);\r\n  });\r\n};","const errorMessages = require(\"../error-messages\");\n\n\n/**\n * Listen for input changes on a form's input members\n * and invoke the handleInputChange for each input element in the form\n * @param {Function} callback: A validation callback, \n *   the function will be invoked for each input field validated and \n *   will receive the input field element as the first argument,\n *   and a boolean indicating the validation result as the second argument.\n *   On completion of validation (when every element has been validated), \n *   the function will be invoked with either \n *      - the form element (if any), or \n *      - the SmartFormValidator instance\n *   and the result of the entire validation, \n *   that is, whether all fields are valid (true) or not (false).\n * @return {Object} with a `valid()` method. The method returns:\n *   true if all fields are valid according to supplied rules, false otherwise.\n */\nmodule.exports = function validateFormFields(callback) {\n  let formValid = false;\n  const form = this.form || this; // when we are using SmartFormValidator instance for isolated elements without an underlying form element.\n  const fields = this.getFields();\n  const inputFields = fields.filter(f => !(isSubmitButton(f)));\n  const submitButton = fields.find(isSubmitButton)?.getElement();\n  const rules = inputFields.map(field => Boolean(field.getRule()));\n\n  const classEffects = this.constructor.getEffects(); // SmartForm and SmartFormValidator are the constructors\n  const instanceEffects = this.getEffects();\n  const effects = Object.assign({}, \n    classEffects.default, classEffects.addon, \n    instanceEffects.default, instanceEffects.addon\n  );\n  const effectFns = Object.values(effects);\n  const validationCallback = getValidationCallback();\n  \n  inputFields.forEach(function observeField(field) {\n    const input = field.getElement();\n  \n    input.addEventListener(getListenerEvent(input), getChangeProcessor(field, input));\n  });\n  \n  return {\n    valid: () => formValid,\n  };\n\n  /**\n   * @param {Object} field: SmartField instance\n   * @param {Object} input: the underlying HTML Element of the SmartField instance \n   * @returns {Function} an event listener function\n   */\n  function getChangeProcessor(field, input) {\n    return function processInputChange() {\n      const valid = field.validate();\n      const validationState = validationCallback(field, valid, rules);\n\n      formValid = validationState.formValid;\n\n      if(typeof callback === \"function\") {\n        callback(input, valid);\n\n        if(validationState.allFieldsValidated) {\n          callback(form, formValid);\n        }\n      }\n\n      applyEffects(formValid, effectFns, submitButton);\n    };\n  }\n};\n\n\n// Helpers\nfunction applyEffects(validationPassed, effects, submitButton) {\n  if(effects.length === 0) {\n    throw new TypeError(errorMessages.noEffectsActive);\n  }\n\n  effects.forEach(({ valid, invalid }) => {\n    if(validationPassed) {\n      valid(submitButton);\n    } else {\n      invalid(submitButton);\n    }\n  });\n}\n\nfunction isSubmitButton(smartField) {\n  return smartField.role === \"submit-button\";\n}\n\n/**\n * Get the event we should listen for on an element.\n * @param {Object} input: HTML (input) element\n * @return {Object} the event to listen for on the element\n */\nfunction getListenerEvent(input) {\n  let targetEvent;\n\n  switch(input.type) {\n  case \"checkbox\" : targetEvent = \"click\"; break;\n  case \"email\"    :\n  case \"password\" : \n  case \"text\"     : \n  default         : targetEvent = \"input\"; break;\n  }\n\n  return targetEvent;\n}\n\n/**\n * @param void \n * @returns function. \n * The returned function takes and returns the following parameters and return value: \n *    @param {Object} field: SmartField instance\n *    @param {Boolean} valid: whether the current field passed validation or not\n *    @param {Array} rules: Array of the all the rules for all the fields being validated, not just for the current field.\n *    @returns {Object}\n */\nfunction getValidationCallback() {\n  let validatedFields = {};\n\n  return function validationCallback(field, valid, rules) {\n    let formValid = false;\n    let allFieldsValidated = false;\n\n    validatedFields[field.id] = validatedFields[field.id] || {};\n    validatedFields[field.id].valid = valid;\n  \n    if(Object.keys(validatedFields).length === rules.length) {\n      allFieldsValidated = true;\n      formValid = Object.values(validatedFields).every(field => field.valid);\n    }\n  \n    return { formValid, allFieldsValidated };\n  };\n}\n","const errorMessages = require(\"../error-messages\");\r\nconst { createListFromArray } = require(\"../helpers\");\r\n\r\nconst instanceMethodNames = [\r\n  \"addField\",\r\n  \"addFields\",\r\n  \"addRule\",\r\n  \"addValidator\", \r\n  \"getValidators\",\r\n  \"getEffects\",\r\n  \"getField\",\r\n  \"getFields\",\r\n  \"removeRule\",\r\n  \"reset\",\r\n  \"toJSON\",\r\n  \"useEffect\",\r\n  \"validate\",\r\n  \"watch\",\r\n];\r\n\r\nconst staticMethodNames = [\"getEffects\", \"useEffect\"];\r\n\r\nmodule.exports = { \r\n  addInstanceMethod,\r\n  addStaticMethod,\r\n};\r\n\r\n\r\n/**\r\n * \r\n * @param {Function} ctor: a constructor function \r\n * @param {String} methodName: the method name to bind to instances of that constructor\r\n */\r\nfunction addInstanceMethod(ctor, methodName) {\r\n  if(typeof ctor !== \"function\") {\r\n    throw new TypeError(\r\n      errorMessages.functionParamExpectsType\r\n        .replace(\":param:\", \"ctor\")\r\n        .replace(\":type:\", \"(constructor) function\")\r\n    );\r\n  }\r\n\r\n  if(!instanceMethodNames.includes(methodName)) {\r\n    throw new TypeError(\r\n      errorMessages.unknownType\r\n        .replace(\":type:\", \"instance method\")\r\n        .replace(\":typeName:\", methodName)\r\n        .replace(\":types:\", \"methods\")\r\n        .replace(\":allowedTypes:\", createListFromArray(instanceMethodNames))\r\n    );\r\n  }\r\n\r\n  ctor.prototype[methodName] = require(`./${methodName}`);\r\n}\r\n\r\n/**\r\n * \r\n * @param {Function} ctor: a constructor function \r\n * @param {String} methodName: the method name to bind as a static member to the constructor\r\n */\r\nfunction addStaticMethod(ctor, methodName) {\r\n  if(typeof ctor !== \"function\") {\r\n    throw new TypeError(\r\n      errorMessages.functionParamExpectsType\r\n        .replace(\":param:\", \"ctor\")\r\n        .replace(\":type:\", \"(constructor) function\")\r\n    );\r\n  }\r\n  \r\n  if(!staticMethodNames.includes(methodName)) {\r\n    throw new TypeError(\r\n      errorMessages.unknownType\r\n        .replace(\":type:\", \"static method\")\r\n        .replace(\":typeName:\", methodName)\r\n        .replace(\":types:\", \"methods\")\r\n        .replace(\":allowedTypes:\", createListFromArray(staticMethodNames))\r\n    );\r\n  }\r\n  \r\n  ctor[methodName] = require(`./${methodName}`);\r\n}","\"use strict\";\r\n\r\nconst errorMessages = require(\"./error-messages\");\r\nconst { is, isSubmitBtn, validateId } = require(\"./helpers\");\r\nconst { addInstanceMethod, addStaticMethod } = require(\"./methods\");\r\n\r\nconst staticMethods = [\"getEffects\", \"useEffect\"];\r\nconst instanceMethods = [\r\n  \"addRule\", \"removeRule\", \"getField\", \"getFields\", \r\n  \"getEffects\", \"reset\", \"useEffect\", \"toJSON\", \"validate\", \"watch\"\r\n];\r\n\r\n\r\nmodule.exports = SmartForm;\r\n\r\n\r\n/**\r\n * Create a new SmartForm object.\r\n * @param {Object|String} the form element to add validation routine to.\r\n *    This can be the HTML form object if we already have it, or its ID.\r\n * @param {Array} rules (optional): array of objects specifying the validation rules for the form's elements.\r\n * @param {String} [rules[i].fieldId]: the id of the input field to apply these rules to\r\n * @param {Boolean} [rules[i].required]: specifies whether the field is required (true) or not (false)\r\n * @param {Number|Object} [rules[i].length]: specifies the accepted input length. \r\n *    If the value is a number, it specifies the maximum length.\r\n *    If the value is an object, it specifies. the minimum and/or maximum length.\r\n * @param {Number} [rules[i].length.min]: specifies the mininum accepted input length\r\n * @param {Number} [rules[i].length.max]: specifies the maximum accepted input length\r\n * @param {Boolean} [rules[i].matchCase]: performs a case-sensitive (true) or case-insensitive (false) validation.\r\n * @param {String} [rules[i].type]: the input field's expected data type (alnum|alpha|email|number|text).\r\n *    Default is alnum.\r\n * @param {String} [rules[i].regex]: specifies a custom validation regex.\r\n * \r\n * @returns this.\r\n * \r\n * Before any of the form's fields can have any validation performed on them, \r\n * a rule must be added to it\r\n * either during initialization or by calling the addRule(rule) method on the SmartForm instance.\r\n */\r\nfunction SmartForm(form, rules) {\r\n  if(typeof form === \"string\") {\r\n    form = document.getElementById(form.trim());\r\n  }\r\n\r\n  if(!is.object(form)) {\r\n    throw new TypeError(\r\n      errorMessages.htmlElementExpected\r\n        .replace(\":param:\", \"form\")\r\n        .replace(\":elementType:\", \"form\")\r\n    );\r\n  }\r\n\r\n  this.form = form;\r\n  this.fields = [];\r\n  const elements = form.elements;\r\n\r\n  if(elements) {\r\n    Array.from(elements).forEach(input => {\r\n      if(validateId(input.id) || isSubmitBtn(input)) {\r\n        this.addField(input);\r\n      }\r\n    });\r\n  }\r\n  \r\n  if(is.array(rules)) {\r\n    // Grab a hold of only the input fields passed to our smart-form-validator processor; \r\n    // Ignore other fields and let the user handle those themselves.\r\n    rules.forEach(rule => {\r\n      const input = form.querySelector(`#${rule.fieldId}`);\r\n\r\n      if(input && this.getField(input.id)) {\r\n        this.addRule(rule);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nSmartForm.prototype.addField = function addField(element, rule) {\r\n  const formInputIds = Array.from(this.form.elements).map(el => el.id);\r\n\r\n  if(formInputIds.includes(element.id)) {\r\n    require(\"./methods/addField\").call(this, element, rule);\r\n  }\r\n\r\n  return this;\r\n};\r\n\r\nstaticMethods.forEach(function bindMethodToClass(method) {\r\n  addStaticMethod(SmartForm, method);\r\n});\r\n\r\ninstanceMethods.forEach(function bindMethodToInstance(method) {\r\n  addInstanceMethod(SmartForm, method);\r\n});\r\n","\"use strict\";\r\n\r\nconst { addInstanceMethod, addStaticMethod } = require(\"./methods\");\r\nconst SmartForm = require(\"./smart-form\");\r\n\r\nconst staticMethods = [\"getEffects\", \"useEffect\"];\r\nconst instanceMethods = [\r\n  \"addField\", \"addFields\", \"addRule\", \"removeRule\", \"addValidator\", \"getValidators\", \r\n  \"getField\", \"getFields\", \"getEffects\", \"reset\", \"useEffect\", \"toJSON\", \"validate\", \"watch\"\r\n];\r\n\r\n\r\nmodule.exports = SmartFormValidator;\r\n\r\n\r\nfunction SmartFormValidator() { \r\n  this.fields = [];\r\n  this.form = null;\r\n}\r\n\r\n/**\r\n * Create a new SmartForm object.\r\n * @param {Object|String} the HTML form element to add validation routine to.\r\n *    This can be the HTML form object if we already have it, or its ID.\r\n * @param {Array} rules (optional): array of objects specifying the validation rules for the form's elements.\r\n * @param {String} [rules[i].fieldId]: the id of the input field to apply these rules to\r\n * @param {Boolean} [rules[i].required]: specifies whether the field is required (true) or not (false)\r\n * @param {Number|Object} [rules[i].length]: specifies the accepted input length. \r\n *    If the value is a number, it specifies the maximum length.\r\n *    If the value is an object, it specifies. the minimum and/or maximum length.\r\n * @param {Number} [rules[i].length.min]: specifies the mininum accepted input length\r\n * @param {Number} [rules[i].length.max]: specifies the maximum accepted input length\r\n * @param {Boolean} [rules[i].matchCase]: performs a case-sensitive (true) or case-insensitive (false) validation.\r\n * @param {String} [rules[i].type]: the input field's expected data type (alnum|alpha|email|number|text).\r\n *    Default is alnum.\r\n * @param {String} [rules[i].regex]: specifies a custom validation regex.\r\n * \r\n * @returns {Object} SmartForm instance.\r\n * \r\n * Before any of the form's fields can have any validation performed on them, \r\n * a rule must be added to it\r\n * either here or by calling the addRule(rule) method on the returned SmartForm instance.\r\n */\r\nSmartFormValidator.prototype.addForm = function addForm(form, rules) {\r\n  const smartForm = new SmartForm(form, rules);\r\n\r\n  this.form = smartForm.form;\r\n\r\n  return smartForm;\r\n};\r\n\r\nstaticMethods.forEach(function bindMethodToClass(method) {\r\n  addStaticMethod(SmartFormValidator, method);\r\n});\r\n\r\ninstanceMethods.forEach(function bindMethodToInstance(method) {\r\n  addInstanceMethod(SmartFormValidator, method);\r\n});\r\n","\"use strict\";\n\nconst SmartFormValidator = require(\"./smart-form-validator\");\n\nmodule.exports = SmartFormValidator;\n"],"names":["errorMessages","argNamesAreReserved","fieldCannotBeEmpty","fieldNotRegistered","functionParamExpectsType","functionParamIsRequired","htmlElementExpected","noObjectWithSpecifiedKey","noEffectsActive","noValidatorsActive","objectPropertyCannotBeEmpty","objectMustHaveProperty","objectsMustHaveProperty","objectPropertyShouldHaveType","objectWithKeyExists","objectWithKeyExistsCanReplace","unknownType","require$$0","APP_CLASSNAME","SMART_FIELD_CLASSNAME","DISABLED_FIELD_CLASSNAME","VALID_FIELD_CLASSNAME","INVALID_FIELD_CLASSNAME","is","array","isArray","isFunction","number","isNumber","object","isObject","string","isString","clone","cloneAndExtend","has","objectHas","helpers","createListFromArray","generateEffectName","getEffectNames","getValidatorNames","isSubmitBtn","normalizeId","preEffectRegistrationCheck","preValidatorRegistrationCheck","validateId","data","Array","num","Number","isNaN","_typeof","obj","prop","Object","prototype","hasOwnProperty","call","assign","newProps","combinator","concat","join","name","namespace","trim","length","effects","effectObjects","values","effectNames","map","effect","validators","keys","element","type","role","id","String","defaultEffectNames","TypeError","replace","meta","valid","invalid","effectName","includes","_objectSpread","validatorKey","validatorFn","validatorMeta","defaultValidatorKeys","validatorNamespace","generateValidatorKey","Boolean","key","effectsHelpers","isSubmitButton","_require$$","require$$1","addBottomBorder","handleValid","handleInvalid","field","classList","remove","add","addValidationStatusIcons","toggleSubmitButton","init","canSubmitForm","validationPassed","input","submitBtn","removeAttribute","setAttribute","e","console","log","message","require$$2","regexRules","validatorHelpers","createAlphanumericRegexObject","getLengthRegex","getRegexRules","regexStr","rule","emptyLengthCharacter","lenRegex","RegExp","matchCase","lengthRule","len","min","max","tmp","alphanumericValidator","value","allowWhitespace","regex","test","alphaValidator","asciiTextValidator","emailValidator","emailParts","split","_emailParts","_slicedToArray","account","address","domainParts","some","part","lengthValidator","numberValidator","regexValidator","requiredFieldValidator","_","extras","required","passed","checked","require$$3","require$$4","require$$5","require$$6","require$$7","defaultValidators","defaultEffects","defaultValidatorFunctions","entries","smartField","SmartField","getValue","Map","_iterator","_createForOfIteratorHelper","_step","s","n","done","set","err","f","addRule","fieldId","claimField","existingRule","removeRule","getRule","getEffect","toLowerCase","get","getEffects","getActiveEffects","addon","useEffect","parsedEffect","usesEffect","getElement","size","addValidator","hasValidator","getValidators","_input$type","_input$tagName","tagName","_getHtmlSelectElement","getHtmlSelectElementSelectedOption","isContentEditable","textContent","validate","_this$getValidators","addonValidators","from","_this$getEffects","addonEffects","reduce","fn","forEach","invokeValidationResultEffect","_ref","watch","callback","_this","targetEvent","addEventListener","reset","_this$getEffects2","reInitEffect","selectElement","text","options","selectedIndex","_input$classList","_input$classList2","addField","document","getElementById","getField","fields","push","addFields","getFields","_i","_Object$values","find","_Object$entries","_Object$entries$_i","validator","getValidator","resetField","toJSON","registerEffectForField","_effect$meta","targetFields","filter","filterOutSubmitButton","validated","validateField","every","fieldPassedValidation","validateFormFields","_fields$find","formValid","form","inputFields","submitButton","rules","classEffects","constructor","instanceEffects","effectFns","validationCallback","getValidationCallback","observeField","getListenerEvent","getChangeProcessor","processInputChange","validationState","allFieldsValidated","applyEffects","validatedFields","instanceMethodNames","staticMethodNames","methods","addInstanceMethod","addStaticMethod","ctor","methodName","require","staticMethods","instanceMethods","smartForm","SmartForm","elements","querySelector","formInputIds","el","bindMethodToClass","method","bindMethodToInstance","smartFormValidator","SmartFormValidator","addForm","src"],"mappings":";;;;;;;;;;CAAA,IAAAA,eAAc,GAAG;CACfC,EAAAA,mBAAmB,EAAE,uFAAuF;CAC5GC,EAAAA,kBAAkB,EAAE,gDAAgD;CACpEC,EAAAA,kBAAkB,EAAE,iFAAiF;CACrGC,EAAAA,wBAAwB,EAAE,uCAAuC;CACjEC,EAAAA,uBAAuB,EAAE,oCAAoC;CAC7DC,EAAAA,mBAAmB,EAAE,gEAAgE;CACrFC,EAAAA,wBAAwB,EAAE,yCAAyC;GACnEC,eAAe,EAAE,mDAAmD,GAClE,sDAAsD;GACxDC,kBAAkB,EAAE,iDAAiD,GACnE,qDAAqD,GACrD,2EAA2E,GAC3E,mDAAmD,GACnD,0EAA0E;CAC5EC,EAAAA,2BAA2B,EAAE,gEAAgE;CAC7FC,EAAAA,sBAAsB,EAAE,sDAAsD;CAC9EC,EAAAA,uBAAuB,EAAE,kHAAkH;CAC3IC,EAAAA,4BAA4B,EAAE,kEAAkE;CAChGC,EAAAA,mBAAmB,EAAE,0CAA0C;CAC/DC,EAAAA,6BAA6B,EAAE,2EAA2E;CAC1GC,EAAAA,WAAW,EAAE,mEAAA;CACf,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;CCpBD,IAAMhB,eAAa,GAAGiB,eAA2B,CAAA;CAEjD,IAAMC,aAAa,GAAG,KAAK,CAAA;CAC3B,IAAMC,qBAAqB,GAAG,QAAQ,CAAA;CACtC,IAAMC,wBAAwB,GAAG,cAAc,CAAA;CAC/C,IAAMC,qBAAqB,GAAG,QAAQ,CAAA;CACtC,IAAMC,uBAAuB,GAAG,WAAW,CAAA;CAE3C,IAAMC,IAAE,GAAG;CACTC,EAAAA,KAAK,EAAEC,OAAO;CACd,EAAA,UAAA,EAAUC,UAAU;CACpBC,EAAAA,MAAM,EAAEC,QAAQ;CAChBC,EAAAA,MAAM,EAAEC,QAAQ;CAChBC,EAAAA,MAAM,EAAEC,QAAAA;CACV,CAAC,CAAA;CAED,IAAMH,MAAM,GAAG;CACbI,EAAAA,KAAK,EAALA,KAAK;CACLC,EAAAA,cAAc,EAAdA,cAAc;CACdC,EAAAA,GAAG,EAAEC,SAAAA;CACP,CAAC,CAAA;;CAED;CACA,IAAAC,OAAc,GAAG;CACfd,EAAAA,EAAE,EAAFA,IAAE;CACFM,EAAAA,MAAM,EAANA,MAAM;CACNS,EAAAA,mBAAmB,EAAnBA,qBAAmB;CACnBC,EAAAA,kBAAkB,EAAlBA,kBAAkB;CAClBC,EAAAA,cAAc,EAAdA,cAAc;CACdC,EAAAA,iBAAiB,EAAjBA,iBAAiB;CACjBC,EAAAA,WAAW,EAAXA,aAAW;CACXC,EAAAA,WAAW,EAAXA,WAAW;CACXC,EAAAA,0BAA0B,EAA1BA,0BAA0B;CAC1BC,EAAAA,6BAA6B,EAA7BA,6BAA6B;CAC7BC,EAAAA,UAAU,EAAVA,YAAU;CACV5B,EAAAA,aAAa,EAAbA,aAAa;CACbE,EAAAA,wBAAwB,EAAxBA,wBAAwB;CACxBD,EAAAA,qBAAqB,EAArBA,qBAAqB;CACrBE,EAAAA,qBAAqB,EAArBA,qBAAqB;CACrBC,EAAAA,uBAAuB,EAAvBA,uBAAAA;CACF,CAAC,CAAA;CAED,SAASG,OAAOA,CAACsB,IAAI,EAAE;CACrB,EAAA,OAAOC,KAAK,CAACvB,OAAO,CAACsB,IAAI,CAAC,CAAA;CAC5B,CAAA;CAEA,SAASrB,UAAUA,CAACqB,IAAI,EAAE;GACxB,OAAO,OAAOA,IAAI,KAAK,UAAU,CAAA;CACnC,CAAA;CAEA,SAASnB,QAAQA,CAACqB,GAAG,EAAE;CACrBA,EAAAA,GAAG,GAAGC,MAAM,CAACD,GAAG,CAAC,CAAA;GAEjB,OAAO,OAAOA,GAAG,KAAK,QAAQ,IAAI,CAACC,MAAM,CAACC,KAAK,CAACF,GAAG,CAAC,CAAA;CACtD,CAAA;CAEA,SAASnB,QAAQA,CAACiB,IAAI,EAAE;CACtB,EAAA,OAAQK,OAAA,CAAOL,IAAI,CAAA,KAAK,QAAQ,IAAIA,IAAI,IAAI,CAACtB,OAAO,CAACsB,IAAI,CAAC,CAAA;CAC5D,CAAA;CAEA,SAASf,QAAQA,CAACe,IAAI,EAAE;GACtB,OAAO,OAAOA,IAAI,KAAK,QAAQ,CAAA;CACjC,CAAA;CAEA,SAASX,SAASA,CAACiB,GAAG,EAAEC,IAAI,EAAE;GAC5B,OAAOC,MAAM,CAACC,SAAS,CAACC,cAAc,CAACC,IAAI,CAACL,GAAG,EAAEC,IAAI,CAAC,CAAA;CACxD,CAAA;CAEA,SAASrB,KAAKA,CAACoB,GAAG,EAAE;CAClB,EAAA,OAAOvB,QAAQ,CAACuB,GAAG,CAAC,GAAGE,MAAM,CAACI,MAAM,CAAC,EAAE,EAAEN,GAAG,CAAC,GAAGA,GAAG,CAAA;CACrD,CAAA;CAEA,SAASnB,cAAcA,CAACmB,GAAG,EAAEO,QAAQ,EAAE;GACrC,IAAG9B,QAAQ,CAACuB,GAAG,CAAC,IAAIvB,QAAQ,CAAC8B,QAAQ,CAAC,EAAE;KACtC,OAAOL,MAAM,CAACI,MAAM,CAAC1B,KAAK,CAACoB,GAAG,CAAC,EAAEO,QAAQ,CAAC,CAAA;CAC9C,GAAG,MAAM;CACL,IAAA,OAAOP,GAAG,CAAA;CACX,GAAA;CACH,CAAA;CAEA,SAASf,qBAAmBA,CAACd,KAAK,EAAEqC,UAAU,EAAE;CAC9C,EAAA,IAAG,OAAOA,UAAU,KAAK,QAAQ,EAAE;CACjCA,IAAAA,UAAU,GAAG,QAAQ,CAAA;CACtB,GAAA;GAED,OAAAC,EAAAA,CAAAA,MAAA,CAAUD,UAAU,CAAAC,CAAAA,MAAA,CAAGtC,KAAK,CAACuC,IAAI,CAACF,UAAU,CAAC,CAAA,CAAA;CAC/C,CAAA;CAEA,SAAStB,kBAAkBA,CAACyB,IAAI,EAAEC,SAAS,EAAE;CAC3CD,EAAAA,IAAI,GAAGzC,IAAE,CAACQ,MAAM,CAACiC,IAAI,CAAC,GAAGA,IAAI,CAACE,IAAI,EAAE,GAAG,EAAE,CAAA;CACzCD,EAAAA,SAAS,GAAG1C,IAAE,CAACQ,MAAM,CAACkC,SAAS,CAAC,GAAGA,SAAS,CAACC,IAAI,EAAE,GAAG,EAAE,CAAA;GAExD,IAAGF,IAAI,CAACG,MAAM,GAAG,CAAC,IAAIF,SAAS,CAACE,MAAM,GAAG,CAAC,EAAE;CAC1C,IAAA,OAAA,EAAA,CAAAL,MAAA,CAAUG,SAAS,EAAAH,GAAAA,CAAAA,CAAAA,MAAA,CAAIE,IAAI,CAAA,CAAA;CAC/B,GAAG,MAAM,IAAGA,IAAI,CAACG,MAAM,GAAG,CAAC,EAAE;CACzB,IAAA,OAAOH,IAAI,CAAA;CACf,GAAG,MAAM;CACL,IAAA,OAAO,EAAE,CAAA;CACV,GAAA;CACH,CAAA;CAEA,SAASxB,cAAcA,CAAC4B,OAAO,EAAE;CAC/B,EAAA,IAAMC,aAAa,GAAGd,MAAM,CAACe,MAAM,CAACF,OAAO,CAAC,CAAA;CAC5C,EAAA,IAAMG,WAAW,GAAGF,aAAa,CAACG,GAAG,CAAC,UAAAC,MAAM,EAAA;KAAA,OAAIA,MAAM,CAACT,IAAI,CAAA;IAAC,CAAA,CAAA;CAE5D,EAAA,OAAOO,WAAW,CAAA;CACpB,CAAA;CAEA,SAAS9B,iBAAiBA,CAACiC,UAAU,EAAE;CACrC,EAAA,OAAOnB,MAAM,CAACoB,IAAI,CAACD,UAAU,CAAC,CAAA;CAChC,CAAA;CAEA,SAAShC,aAAWA,CAACkC,OAAO,EAAE;GAC5B,OAAOA,OAAO,CAACC,IAAI,KAAK,QAAQ,IAAID,OAAO,CAACE,IAAI,KAAK,eAAe,CAAA;CACtE,CAAA;CAEA,SAASnC,WAAWA,CAACoC,EAAE,EAAE;CACvB,EAAA,OAAOC,MAAM,CAACD,EAAE,CAAC,CAACb,IAAI,EAAE,CAAA;CAC1B,CAAA;CAEA,SAAStB,0BAA0BA,CAAC6B,MAAM,EAAEQ,kBAAkB,EAAE;CAC9D,EAAA,IAAG,CAAE1D,IAAE,CAACM,MAAM,CAAC4C,MAAM,CAAE,EAAE;KACvB,MAAM,IAAIS,SAAS,CACjBlF,eAAa,CAACI,wBAAwB,CACnC+E,OAAO,CAAC,SAAS,EAAE,QAAQ,CAAC,CAC5BA,OAAO,CAAC,QAAQ,EAAE,WAAW,CACtC,CAAK,CAAA;CACF,GAAA;CAED,EAAA,IAAMnB,IAAI,GAA2BS,MAAM,CAArCT,IAAI;KAAEoB,IAAI,GAAqBX,MAAM,CAA/BW,IAAI;KAAEC,KAAK,GAAcZ,MAAM,CAAzBY,KAAK;KAAEC,OAAO,GAAKb,MAAM,CAAlBa,OAAO,CAAA;CAEhC,EAAA,IAAG,CAAE/D,IAAE,CAACQ,MAAM,CAACiC,IAAI,CAAE,EAAE;KACrB,MAAM,IAAIkB,SAAS,CACjBlF,eAAa,CAACI,wBAAwB,CACnC+E,OAAO,CAAC,SAAS,EAAE,aAAa,CAAC,CACjCA,OAAO,CAAC,QAAQ,EAAE,UAAU,CACrC,CAAK,CAAA;CACF,GAAA;GAED,IAAIlB,SAAS,GAAG,EAAE,CAAA;CAClBD,EAAAA,IAAI,GAAGA,IAAI,CAACE,IAAI,EAAE,CAAA;CAElB,EAAA,IAAG,CAAE3C,IAAE,CAAA,UAAA,CAAS,CAAC8D,KAAK,CAAE,EAAE;KACxB,MAAM,IAAIH,SAAS,CACjBlF,eAAa,CAACI,wBAAwB,CACnC+E,OAAO,CAAC,SAAS,EAAE,cAAc,CAAC,CAClCA,OAAO,CAAC,QAAQ,EAAE,YAAY,CACvC,CAAK,CAAA;CACF,GAAA;CAED,EAAA,IAAG,CAAE5D,IAAE,CAAA,UAAA,CAAS,CAAC+D,OAAO,CAAE,EAAE;KAC1B,MAAM,IAAIJ,SAAS,CACjBlF,eAAa,CAACI,wBAAwB,CACnC+E,OAAO,CAAC,SAAS,EAAE,gBAAgB,CAAC,CACpCA,OAAO,CAAC,QAAQ,EAAE,YAAY,CACvC,CAAK,CAAA;CACF,GAAA;CAED,EAAA,IAAG5D,IAAE,CAACM,MAAM,CAACuD,IAAI,CAAC,IAAI7D,IAAE,CAACQ,MAAM,CAACqD,IAAI,CAACnB,SAAS,CAAC,EAAE;CAC/CA,IAAAA,SAAS,GAAGmB,IAAI,CAACnB,SAAS,CAACC,IAAI,EAAE,CAAA;CAClC,GAAA;CAED,EAAA,IAAMqB,UAAU,GAAGhD,kBAAkB,CAACyB,IAAI,EAAEC,SAAS,CAAC,CAAA;CAEtD,EAAA,IAAGsB,UAAU,CAACpB,MAAM,KAAK,CAAC,EAAE;KAC1B,MAAM,IAAIe,SAAS,CACjBlF,eAAa,CAACE,kBAAkB,CAC7BiF,OAAO,CAAC,SAAS,EAAE,aAAa,CAAC,CACjCA,OAAO,CAAC,QAAQ,EAAE,QAAQ,CACnC,CAAK,CAAA;CACF,GAAA;CAED,EAAA,IAAGF,kBAAkB,CAACO,QAAQ,CAACD,UAAU,CAAC,EAAE;CAC1C,IAAA,MAAM,IAAIL,SAAS,CACjBlF,eAAa,CAACC,mBAAmB,CAC9BkF,OAAO,CAAC,YAAY,EAAE,OAAO,CAAC,CAC9BA,OAAO,CAAC,YAAY,EAAE,cAAc,CAAC,CACrCA,OAAO,CAAC,aAAa,EAAE7C,qBAAmB,CAAC2C,kBAAkB,CAAC,CACvE,CAAK,CAAA;CACF,GAAA;CAED,EAAA,OAAAQ,cAAA,CAAAA,cAAA,CAAA,EAAA,EAAYhB,MAAM,CAAA,EAAA,EAAA,EAAA;CAAET,IAAAA,IAAI,EAAEuB,UAAAA;CAAU,GAAA,CAAA,CAAA;CACtC,CAAA;CAEA,SAAS1C,6BAA6BA,CAAC6C,YAAY,EAAEC,WAAW,EAAEC,aAAa,EAAEC,oBAAoB,EAAE;CACrG,EAAA,IAAG,CAAEtE,IAAE,CAACQ,MAAM,CAAC2D,YAAY,CAAE,EAAE;KAC7B,MAAM,IAAIR,SAAS,CACjBlF,eAAa,CAACI,wBAAwB,CACnC+E,OAAO,CAAC,SAAS,EAAE,cAAc,CAAC,CAClCA,OAAO,CAAC,QAAQ,EAAE,UAAU,CACrC,CAAK,CAAA;CACF,GAAA;GAED,IAAIW,kBAAkB,GAAG,EAAE,CAAA;CAE3BJ,EAAAA,YAAY,GAAGA,YAAY,CAACxB,IAAI,EAAE,CAAA;GAElC,IAAG,CAACwB,YAAY,EAAE;KAChB,MAAM,IAAIR,SAAS,CACjBlF,eAAa,CAACE,kBAAkB,CAC7BiF,OAAO,CAAC,SAAS,EAAE,cAAc,CAAC,CAClCA,OAAO,CAAC,QAAQ,EAAE,QAAQ,CAAC,CAAC,CAAA;CAClC,GAAA;CAED,EAAA,IAAG5D,IAAE,CAACM,MAAM,CAAC+D,aAAa,CAAC,IAAIrE,IAAE,CAACQ,MAAM,CAAC6D,aAAa,CAAC3B,SAAS,CAAC,EAAE;CACjE6B,IAAAA,kBAAkB,GAAGF,aAAa,CAAC3B,SAAS,CAACC,IAAI,EAAE,CAAA;CACpD,GAAA;CAEDwB,EAAAA,YAAY,GAAGK,oBAAoB,CAACL,YAAY,EAAEI,kBAAkB,CAAC,CAAA;CAErE,EAAA,IAAGD,oBAAoB,CAACL,QAAQ,CAACE,YAAY,CAAC,EAAE;CAC9C,IAAA,MAAM,IAAIR,SAAS,CACjBlF,eAAa,CAACC,mBAAmB,CAC9BkF,OAAO,CAAC,YAAY,EAAE,MAAM,CAAC,CAC7BA,OAAO,CAAC,YAAY,EAAE,gBAAgB,CAAC,CACvCA,OAAO,CAAC,aAAa,EAAE7C,qBAAmB,CAACuD,oBAAoB,CAAC,CACzE,CAAK,CAAA;CACF,GAAA;CAED,EAAA,IAAG,CAAEtE,IAAE,CAAA,UAAA,CAAS,CAACoE,WAAW,CAAE,EAAE;KAC9B,MAAM,IAAIT,SAAS,CACjBlF,eAAa,CAACI,wBAAwB,CACnC+E,OAAO,CAAC,SAAS,EAAE,aAAa,CAAC,CACjCA,OAAO,CAAC,QAAQ,EAAE,YAAY,CACvC,CAAK,CAAA;CACF,GAAA;CAED,EAAA,OAAOO,YAAY,CAAA;CACrB,CAAA;CAEA,SAAS5C,YAAUA,CAACiC,EAAE,EAAE;CACtB,EAAA,OAAO,CAAC,QAAQ,EAAE,QAAQ,CAAC,CAACS,QAAQ,CAAApC,OAAA,CAAQ2B,EAAE,CAAC,CAAA,IAAIiB,OAAO,CAACjB,EAAE,CAAC,CAAA;CAChE,CAAA;;CAGA;CACA,SAASgB,oBAAoBA,CAACE,GAAG,EAAEhC,SAAS,EAAE;GAC5C,IAAGgC,GAAG,CAAC9B,MAAM,GAAG,CAAC,IAAIF,SAAS,CAACE,MAAM,GAAG,CAAC,EAAE;CACzC,IAAA,OAAA,EAAA,CAAAL,MAAA,CAAUG,SAAS,EAAAH,GAAAA,CAAAA,CAAAA,MAAA,CAAImC,GAAG,CAAA,CAAA;CAC9B,GAAG,MAAM,IAAGA,GAAG,CAAC9B,MAAM,GAAG,CAAC,EAAE;CACxB,IAAA,OAAO8B,GAAG,CAAA;CACd,GAAG,MAAM;CACL,IAAA,OAAO,EAAE,CAAA;CACV,GAAA;CACH;;;;;;;CCtPA,EAAA,IAAQ1E,EAAE,GAAKN,OAAqB,CAA5BM,EAAE,CAAA;CAGV2E,EAAAA,cAAc,GAAG;CACfC,IAAAA,cAAc,EAAdA,cAAAA;IACD,CAAA;GAGD,SAASA,cAAcA,CAACvB,OAAO,EAAE;CAC/B,IAAA,OACErD,EAAE,CAACM,MAAM,CAAC+C,OAAO,CAAC,KAAKA,OAAO,CAACC,IAAI,KAAK,QAAQ,IAAID,OAAO,CAACE,IAAI,KAAK,eAAe,CAAC,CAAA;CAEzF,GAAA;;;;;;;;;CCZA,EAAA,IAAQvD,EAAE,GAAqDN,OAAwB,CAA/EM,EAAE;KAAEF,qBAAqB,GAA8BJ,OAAwB,CAA3EI,qBAAqB;KAAEC,uBAAuB,GAAKL,OAAwB,CAApDK,uBAAuB,CAAA;CAC1D,EAAA,IAAA8E,UAAA,GAA2BC,uBAA6B;KAAhDF,cAAc,GAAAC,UAAA,CAAdD,cAAc,CAAA;CAEtBG,EAAAA,eAAc,GAAG;CACftC,IAAAA,IAAI,EAAE,iBAAiB;KACvBoB,IAAI,EAAE,EAAE;CACRC,IAAAA,KAAK,EAAEkB,WAAW;CAClBjB,IAAAA,OAAO,EAAEkB,aAAAA;IACV,CAAA;GAED,SAASD,WAAWA,CAACE,KAAK,EAAE;CAC1B,IAAA,IAAG,CAAElF,EAAE,CAACM,MAAM,CAAC4E,KAAK,CAAE,IAAIN,cAAc,CAACM,KAAK,CAAC,EAAE;CAC/C,MAAA,OAAA;CACD,KAAA;CAEDA,IAAAA,KAAK,CAACC,SAAS,CAACC,MAAM,CAACrF,uBAAuB,CAAC,CAAA;CAC/CmF,IAAAA,KAAK,CAACC,SAAS,CAACE,GAAG,CAACvF,qBAAqB,CAAC,CAAA;CAC5C,GAAA;GAEA,SAASmF,aAAaA,CAACC,KAAK,EAAE;CAC5B,IAAA,IAAG,CAAElF,EAAE,CAACM,MAAM,CAAC4E,KAAK,CAAE,IAAIN,cAAc,CAACM,KAAK,CAAC,EAAE;CAC/C,MAAA,OAAA;CACD,KAAA;CAEDA,IAAAA,KAAK,CAACC,SAAS,CAACC,MAAM,CAACtF,qBAAqB,CAAC,CAAA;CAC7CoF,IAAAA,KAAK,CAACC,SAAS,CAACE,GAAG,CAACtF,uBAAuB,CAAC,CAAA;CAC9C,GAAA;;;;;;;;;CC1BA,EAAA,IAAQC,EAAE,GAAqDN,OAAwB,CAA/EM,EAAE;KAAEF,qBAAqB,GAA8BJ,OAAwB,CAA3EI,qBAAqB;KAAEC,uBAAuB,GAAKL,OAAwB,CAApDK,uBAAuB,CAAA;CAC1D,EAAA,IAAA8E,UAAA,GAA2BC,uBAA6B;KAAhDF,cAAc,GAAAC,UAAA,CAAdD,cAAc,CAAA;CAGtBU,EAAAA,wBAAc,GAAG;CACf7C,IAAAA,IAAI,EAAE,0BAA0B;KAChCoB,IAAI,EAAE,EAAE;CACRC,IAAAA,KAAK,EAAEkB,WAAW;CAClBjB,IAAAA,OAAO,EAAEkB,aAAAA;IACV,CAAA;GAGD,SAASD,WAAWA,CAACE,KAAK,EAAE;CAC1B,IAAA,IAAG,CAAElF,EAAE,CAACM,MAAM,CAAC4E,KAAK,CAAE,IAAIN,cAAc,CAACM,KAAK,CAAC,EAAE;CAC/C,MAAA,OAAA;CACD,KAAA;CAEDA,IAAAA,KAAK,CAACC,SAAS,CAACC,MAAM,CAACrF,uBAAuB,CAAC,CAAA;CAC/CmF,IAAAA,KAAK,CAACC,SAAS,CAACE,GAAG,CAACvF,qBAAqB,CAAC,CAAA;CAC5C,GAAA;GAEA,SAASmF,aAAaA,CAACC,KAAK,EAAE;CAC5B,IAAA,IAAG,CAAElF,EAAE,CAACM,MAAM,CAAC4E,KAAK,CAAE,IAAIN,cAAc,CAACM,KAAK,CAAC,EAAE;CAC/C,MAAA,OAAA;CACD,KAAA;CAEDA,IAAAA,KAAK,CAACC,SAAS,CAACC,MAAM,CAACtF,qBAAqB,CAAC,CAAA;CAC7CoF,IAAAA,KAAK,CAACC,SAAS,CAACE,GAAG,CAACtF,uBAAuB,CAAC,CAAA;CAC9C,GAAA;;;;;;;;;CC5BA,EAAA,IAAQJ,aAAa,GAA+BD,OAAwB,CAApEC,aAAa;KAAEE,wBAAwB,GAAKH,OAAwB,CAArDG,wBAAwB,CAAA;CAC/C,EAAA,IAAAgF,UAAA,GAA2BC,uBAA6B;KAAhDF,cAAc,GAAAC,UAAA,CAAdD,cAAc,CAAA;CAGtBW,EAAAA,kBAAc,GAAG;CACf9C,IAAAA,IAAI,EAAE,oBAAoB;KAC1BoB,IAAI,EAAE,EAAE;CACR2B,IAAAA,IAAI,EAAJA,IAAI;CACJ1B,IAAAA,KAAK,EAAEkB,WAAW;CAClBjB,IAAAA,OAAO,EAAEkB,aAAAA;IACV,CAAA;GAGD,SAASO,IAAIA,CAACN,KAAK,EAAE;CACrB;CACEO,IAAAA,aAAa,CAAC,KAAK,EAAEP,KAAK,CAAC,CAAA;CAC7B,GAAA;GAEA,SAASF,WAAWA,CAACE,KAAK,EAAE;CAC1BO,IAAAA,aAAa,CAAC,IAAI,EAAEP,KAAK,CAAC,CAAA;CAC5B,GAAA;GAEA,SAASD,aAAaA,CAACC,KAAK,EAAE;CAC5BO,IAAAA,aAAa,CAAC,KAAK,EAAEP,KAAK,CAAC,CAAA;CAC7B,GAAA;;CAGA;CACA,EAAA,SAASO,aAAaA,CAACC,gBAAgB,EAAEC,KAAK,EAAE;KAC9C,IAAI;CACF,MAAA,IAAG,CAACf,cAAc,CAACe,KAAK,CAAC,EAAE;CACzB,QAAA,OAAA;CACD,OAAA;OAED,IAAMC,SAAS,GAAGD,KAAK,CAAA;CAEvB,MAAA,IAAGD,gBAAgB,EAAE;CACnBE,QAAAA,SAAS,CAACC,eAAe,CAAC,UAAU,CAAC,CAAA;CACrCD,QAAAA,SAAS,CAACT,SAAS,CAACC,MAAM,CAACzF,aAAa,CAAC,CAAA;CACzCiG,QAAAA,SAAS,CAACT,SAAS,CAACC,MAAM,CAACvF,wBAAwB,CAAC,CAAA;CAC1D,OAAK,MAAM;CACL+F,QAAAA,SAAS,CAACE,YAAY,CAAC,UAAU,EAAE,IAAI,CAAC,CAAA;CACxCF,QAAAA,SAAS,CAACT,SAAS,CAACE,GAAG,CAAC1F,aAAa,CAAC,CAAA;CACtCiG,QAAAA,SAAS,CAACT,SAAS,CAACE,GAAG,CAACxF,wBAAwB,CAAC,CAAA;CAClD,OAAA;MACF,CAAC,OAAMkG,CAAC,EAAE;OACTC,OAAO,CAACC,GAAG,CAAC,4CAA4C,EAAEF,CAAC,CAACG,OAAO,CAAC,CAAA;CACrE,KAAA;CACH,GAAA;;;;;;;;;CChDArD,EAAAA,OAAc,GAAG;KACfkC,eAAe,EAAErF,sBAA8B,EAAA;KAC/C4F,wBAAwB,EAAER,+BAAwC,EAAA;KAClES,kBAAkB,EAAEY,yBAAiC,EAAA;IACtD,CAAA;;;;;;;;;CCJD,EAAA,IAAQnG,EAAE,GAAaN,OAAqB,CAApCM,EAAE;KAAEM,MAAM,GAAKZ,OAAqB,CAAhCY,MAAM,CAAA;CAElB,EAAA,IAAM8F,UAAU,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,CAAA;CAE7BC,EAAAA,gBAAc,GAAG;CACfC,IAAAA,6BAA6B,EAA7BA,6BAA6B;CAC7BC,IAAAA,cAAc,EAAdA,cAAc;CACdC,IAAAA,aAAa,EAAbA,aAAAA;IACD,CAAA;CAED,EAAA,SAASF,6BAA6BA,CAACG,QAAQ,EAAEC,IAAI,EAAEC,oBAAoB,EAAE;CAC3E,IAAA,IAAIC,QAAQ,CAAA;KAEZ,IAAGF,IAAI,CAAC9D,MAAM,EAAE;CACdgE,MAAAA,QAAQ,GAAGL,cAAc,CAACG,IAAI,CAAC9D,MAAM,CAAC,CAAA;CAC1C,KAAG,MAAM;OACLgE,QAAQ,GAAGD,oBAAoB,IAAI,GAAG,CAAA;CACvC,KAAA;KAEDF,QAAQ,GAAA,EAAA,CAAAlE,MAAA,CAAMkE,QAAQ,EAAAlE,MAAA,CAAGqE,QAAQ,CAAE,CAAA;CACnCH,IAAAA,QAAQ,GAAAlE,GAAAA,CAAAA,MAAA,CAAOkE,QAAQ,EAAG,GAAA,CAAA,CAAA;KAE1B,OAAO,IAAII,MAAM,CAACJ,QAAQ,EAAED,aAAa,CAACE,IAAI,CAACI,SAAS,CAAC,CAAC,CAAA;CAC5D,GAAA;GAEA,SAASP,cAAcA,CAACQ,UAAU,EAAE;CAClC,IAAA,IAAIN,QAAQ,CAAA;KACZ,IAAMO,GAAG,GAAG1G,MAAM,CAACI,KAAK,CAACqG,UAAU,CAAC,IAAI,EAAE,CAAA;CAE1C,IAAA,IAAGC,GAAG,CAACC,GAAG,IAAID,GAAG,CAACE,GAAG,EAAE;CACrB,MAAA,IAAGvF,MAAM,CAACqF,GAAG,CAACC,GAAG,CAAC,GAAGtF,MAAM,CAACqF,GAAG,CAACE,GAAG,CAAC,EAAE;CACpC,QAAA,IAAMC,GAAG,GAAGH,GAAG,CAACC,GAAG,CAAA;CAEnBD,QAAAA,GAAG,CAACC,GAAG,GAAGD,GAAG,CAACE,GAAG,CAAA;SACjBF,GAAG,CAACE,GAAG,GAAGC,GAAG,CAAA;CACd,OAAA;CAEDV,MAAAA,QAAQ,GAAAlE,GAAAA,CAAAA,MAAA,CAAOyE,GAAG,CAACC,GAAG,EAAA1E,GAAAA,CAAAA,CAAAA,MAAA,CAAIyE,GAAG,CAACE,GAAG,EAAG,GAAA,CAAA,CAAA;CACxC,KAAG,MAAM,IAAGF,GAAG,CAACC,GAAG,EAAE;CACjBR,MAAAA,QAAQ,OAAAlE,MAAA,CAAOyE,GAAG,CAACC,GAAG,EAAI,IAAA,CAAA,CAAA;CAC9B,KAAG,MAAM,IAAGD,GAAG,CAACE,GAAG,EAAE;CACjBT,MAAAA,QAAQ,SAAAlE,MAAA,CAASyE,GAAG,CAACE,GAAG,EAAG,GAAA,CAAA,CAAA;MAC5B,MAAM,IAAGlH,EAAE,CAACI,MAAM,CAAC4G,GAAG,CAAC,EAAE;CACxBP,MAAAA,QAAQ,GAAAlE,KAAAA,CAAAA,MAAA,CAASyE,GAAG,EAAG,GAAA,CAAA,CAAA;CACxB,KAAA;CAED,IAAA,OAAOP,QAAQ,CAAA;CACjB,GAAA;GAEA,SAASD,aAAaA,CAACM,SAAS,EAAE;CAChC,IAAA,IAAGA,SAAS,EAAE;CACZ,MAAA,OAAOV,UAAU,CAAC5D,IAAI,CAAC,EAAE,CAAC,CAAA;CAC9B,KAAG,MAAM;OACL,OAAO,EAAA,CAAAD,MAAA,CAAI6D,UAAU,EAAA,CAAE,GAAG,CAAE5D,CAAAA,CAAAA,IAAI,CAAC,EAAE,CAAC,CAAA;CACrC,KAAA;CACH,GAAA;;;;;;;;;CCvDA,EAAA,IAAAqC,UAAA,GAA0CnF,yBAA8B;KAAhE4G,6BAA6B,GAAAzB,UAAA,CAA7ByB,6BAA6B,CAAA;;CAErC;CACA;CACA;CACA;CACA;CACA;CACA;CACA;CACA;CACAc,EAAAA,qBAAc,GAAG,SAASA,qBAAqBA,CAACC,KAAK,EAAEX,IAAI,EAAE;KAC3D,IAAG,CAACA,IAAI,CAACpD,IAAI,IAAIoD,IAAI,CAACpD,IAAI,KAAK,OAAO,EAAE;OACtC,OAAO,IAAI,CAAC;CACb,KAAA;;KAED,IAAG,CAAC+D,KAAK,EAAE;CACT,MAAA,OAAO,KAAK,CAAA;CACb,KAAA;KAED,IAAMZ,QAAQ,GAAGC,IAAI,CAACY,eAAe,GAAG,eAAe,GAAG,YAAY,CAAA;CACtE,IAAA,IAAMC,KAAK,GAAGjB,6BAA6B,CAACG,QAAQ,EAAEC,IAAI,CAAC,CAAA;CAE3D,IAAA,OAAOa,KAAK,CAACC,IAAI,CAACH,KAAK,CAAC,CAAA;IACzB,CAAA;;;;;;;;;CCxBD,EAAA,IAAAxC,UAAA,GAA0CnF,yBAA8B;KAAhE4G,6BAA6B,GAAAzB,UAAA,CAA7ByB,6BAA6B,CAAA;;CAErC;CACA;CACA;CACA;CACA;CACA;CACA;CACA;CACA;CACAmB,EAAAA,cAAc,GAAG,SAASA,cAAcA,CAACJ,KAAK,EAAEX,IAAI,EAAE;KACpD,IAAG,CAACA,IAAI,CAACpD,IAAI,IAAIoD,IAAI,CAACpD,IAAI,KAAK,OAAO,EAAE;OACtC,OAAO,IAAI,CAAC;CACb,KAAA;;CAED,IAAA,IAAG,CAAC+D,KAAK,IAAI,OAAOA,KAAK,KAAK,QAAQ,EAAE;CACtC,MAAA,OAAO,KAAK,CAAA;CACb,KAAA;KAED,IAAMZ,QAAQ,GAAGC,IAAI,CAACY,eAAe,GAAG,YAAY,GAAG,SAAS,CAAA;CAChE,IAAA,IAAMC,KAAK,GAAGjB,6BAA6B,CAACG,QAAQ,EAAEC,IAAI,CAAC,CAAA;CAE3D,IAAA,OAAOa,KAAK,CAACC,IAAI,CAACH,KAAK,CAAC,CAAA;IACzB,CAAA;;;;;;;;;CCxBD,EAAA,IAAAxC,UAAA,GAA0CnF,yBAA8B;KAAhE4G,6BAA6B,GAAAzB,UAAA,CAA7ByB,6BAA6B,CAAA;;CAErC;CACA;CACA;CACA;CACA;CACA;CACA;CACA;CACAoB,EAAAA,kBAAc,GAAG,SAASA,kBAAkBA,CAACL,KAAK,EAAEX,IAAI,EAAE;KACxD,IAAG,CAACA,IAAI,CAACpD,IAAI,IAAIoD,IAAI,CAACpD,IAAI,KAAK,OAAO,EAAE;OACtC,OAAO,IAAI,CAAC;CACb,KAAA;;KAED,IAAG,CAAC+D,KAAK,EAAE;CACT,MAAA,OAAO,KAAK,CAAA;CACb,KAAA;CAED,IAAA,IAAMZ,QAAQ,GAAG,6DAA6D,CAAC;CAC/E,IAAA,IAAMc,KAAK,GAAGjB,6BAA6B,CAACG,QAAQ,EAAEC,IAAI,CAAC,CAAA;CAE3D,IAAA,OAAOa,KAAK,CAACC,IAAI,CAACH,KAAK,CAAC,CAAA;IACzB,CAAA;;;;;;;;;CCvBD;CACA;CACA;CACA;CACA;CACA;CACA;CACA;CACA;;GAEA,IAAME,KAAK,GAAG,+HAA+H,CAAA;;CAE7I;CACA;CACA;CACA;CACA;CACA;CACA;CACAI,EAAAA,cAAc,GAAG,SAASA,cAAcA,CAACN,KAAK,EAAEX,IAAI,EAAE;KACpD,IAAG,CAACA,IAAI,CAACpD,IAAI,IAAIoD,IAAI,CAACpD,IAAI,KAAK,OAAO,EAAE;OACtC,OAAO,IAAI,CAAC;CACb,KAAA;;CAED,IAAA,IAAG,CAAC+D,KAAK,IAAI,OAAOA,KAAK,KAAK,QAAQ,EAAE;CACtC,MAAA,OAAO,KAAK,CAAA;CACb,KAAA;CAED,IAAA,IAAMO,UAAU,GAAGP,KAAK,CAACQ,KAAK,CAAC,GAAG,CAAC,CAAA;CAEnC,IAAA,IAAGD,UAAU,CAAChF,MAAM,KAAK,CAAC,EAAE;CAC1B,MAAA,OAAO,KAAK,CAAA;CACb,KAAA;CAED,IAAA,IAAAkF,WAAA,GAAAC,cAAA,CAA2BH,UAAU,EAAA,CAAA,CAAA;CAA9BI,MAAAA,OAAO,GAAAF,WAAA,CAAA,CAAA,CAAA;CAAEG,MAAAA,OAAO,GAAAH,WAAA,CAAA,CAAA,CAAA,CAAA;KAEvB,IAAGE,OAAO,CAACpF,MAAM,GAAG,EAAE,IAAIqF,OAAO,CAACrF,MAAM,GAAG,GAAG,EAAE;CAC9C,MAAA,OAAO,KAAK,CAAA;CACb,KAAA;CAED,IAAA,IAAMsF,WAAW,GAAGD,OAAO,CAACJ,KAAK,CAAC,GAAG,CAAC,CAAA;CAEtC,IAAA,IAAGK,WAAW,CAACC,IAAI,CAAC,UAAAC,IAAI,EAAA;CAAA,MAAA,OAAIA,IAAI,CAACxF,MAAM,GAAG,EAAE,CAAA;CAAA,KAAA,CAAC,EAAE;CAC7C,MAAA,OAAO,KAAK,CAAA;CACb,KAAA;CAED,IAAA,OAAO2E,KAAK,CAACC,IAAI,CAACH,KAAK,CAAC,CAAA;IACzB,CAAA;;;;;;;;;CC/CD,EAAA,IAAQrH,EAAE,GAAKN,OAAqB,CAA5BM,EAAE,CAAA;CACV,EAAA,IAAA6E,UAAA,GAA0CC,yBAA8B;KAAhEwB,6BAA6B,GAAAzB,UAAA,CAA7ByB,6BAA6B,CAAA;;CAErC;CACA;CACA;CACA;CACA;CACA;CACA;CACA;CACA;CACA+B,EAAAA,eAAc,GAAG,SAASA,eAAeA,CAAChB,KAAK,EAAEX,IAAI,EAAE;CACrD,IAAA,IAAG,CAAE1G,EAAE,CAACI,MAAM,CAACsG,IAAI,CAAC9D,MAAM,CAAE,IAAI,CAAE5C,EAAE,CAACM,MAAM,CAACoG,IAAI,CAAC9D,MAAM,CAAE,EAAE;OACzD,OAAO,IAAI,CAAC;CACb,KAAA;;CAED,IAAA,IAAG,OAAOyE,KAAK,KAAK,WAAW,IAAIA,KAAK,KAAK,IAAI,IAAIA,KAAK,KAAK,KAAK,EAAE;CACpE,MAAA,OAAO,KAAK,CAAA;CACb,KAAA;KAED,IAAMZ,QAAQ,GAAG,gBAAgB,CAAA;KACjC,IAAMc,KAAK,GAAGjB,6BAA6B,CAACG,QAAQ,EAAEC,IAAI,EAAE,GAAG,CAAC,CAAA;CAEhE,IAAA,OAAOa,KAAK,CAACC,IAAI,CAACH,KAAK,CAAC,CAAA;IACzB,CAAA;;;;;;;;;CCzBD,EAAA,IAAAxC,UAAA,GAA0CnF,yBAA8B;KAAhE4G,6BAA6B,GAAAzB,UAAA,CAA7ByB,6BAA6B,CAAA;;CAErC;CACA;CACA;CACA;CACA;CACA;CACA;CACA;CACAgC,EAAAA,eAAc,GAAG,SAASA,eAAeA,CAACjB,KAAK,EAAEX,IAAI,EAAE;KACrD,IAAG,CAACA,IAAI,CAACpD,IAAI,IAAIoD,IAAI,CAACpD,IAAI,KAAK,QAAQ,EAAE;OACvC,OAAO,IAAI,CAAC;CACb,KAAA;;CAED,IAAA,IAAG+D,KAAK,KAAK,EAAE,IAAIA,KAAK,KAAK,IAAI,IAAI,OAAOA,KAAK,KAAK,WAAW,EAAE;CACjE,MAAA,OAAO,KAAK,CAAA;CACb,KAAA;KAED,IAAMZ,QAAQ,GAAGC,IAAI,CAACY,eAAe,GAAG,UAAU,GAAG,OAAO,CAAA;CAC5D,IAAA,IAAMC,KAAK,GAAGjB,6BAA6B,CAACG,QAAQ,EAAEC,IAAI,CAAC,CAAA;CAE3D,IAAA,OAAOa,KAAK,CAACC,IAAI,CAACH,KAAK,CAAC,CAAA;IACzB,CAAA;;;;;;;;;CCvBD,EAAA,IAAQrH,EAAE,GAAKN,OAAqB,CAA5BM,EAAE,CAAA;;CAGV;CACA;CACA;CACA;CACA;CACA;CACA;CACAuI,EAAAA,cAAc,GAAG,SAASA,cAAcA,CAAClB,KAAK,EAAEX,IAAI,EAAE;CACpD,IAAA,IAAG,CAACA,IAAI,CAACa,KAAK,EAAE;OACd,OAAO,IAAI,CAAC;CACb,KAAA;;CAED,IAAA,IAAed,QAAQ,GAAKC,IAAI,CAAxBa,KAAK,CAAA;CACb,IAAA,IAAMA,KAAK,GAAGvH,EAAE,CAACM,MAAM,CAACmG,QAAQ,CAAC,GAAGA,QAAQ,GAAG,IAAII,MAAM,CAACJ,QAAQ,CAAC,CAAA;CAEnE,IAAA,OAAOc,KAAK,CAACC,IAAI,CAACH,KAAK,CAAC,CAAA;IACzB,CAAA;;;;;;;;;;;;;;;;;;;GCTamB,sBAAA,GAAG,SAASA,sBAAsBA,CAACnB,KAAK,EAAEX,IAAI,EAAE+B,CAAC,EAAEC,MAAM,EAAE;CACvE,IAAA,IAAG,CAAChC,IAAI,CAACiC,QAAQ,EAAE;OACjB,OAAO,IAAI,CAAC;CACb,KAAA;;KAED,IAAGtB,KAAK,KAAK,EAAE,IAAI,OAAOA,KAAK,KAAK,WAAW,EAAE;CAC/C,MAAA,OAAO,KAAK,CAAA;CACb,KAAA;CAED,IAAA,IAAIuB,MAAM,CAAA;KAEV,QAAOlC,IAAI,CAACpD,IAAI;CAChB,MAAA,KAAK,UAAU;CAAGsF,QAAAA,MAAM,GAAGF,MAAM,CAACG,OAAO,IAAIxB,KAAK,KAAK,IAAI,CAAA;CAAE,QAAA,MAAA;CAC7D,MAAA;CAAkBuB,QAAAA,MAAM,GAAGvB,KAAK,CAACzE,MAAM,GAAG,CAAC,CAAA;CAAE,QAAA,MAAA;CAC5C,KAAA;CAED,IAAA,OAAOgG,MAAM,CAAA;IACd,CAAA;;;;;;;;;CC3BDzF,EAAAA,UAAc,GAAG;KACfiE,qBAAqB,EAAE1H,4BAAmC,EAAA;KAC1D+H,cAAc,EAAE3C,qBAA4B,EAAA;KAC5C4C,kBAAkB,EAAEvB,yBAAiC,EAAA;KACrDwB,cAAc,EAAEmB,qBAA4B,EAAA;KAC5CT,eAAe,EAAEU,sBAA6B,EAAA;KAC9CT,eAAe,EAAEU,sBAA6B,EAAA;KAC9CT,cAAc,EAAEU,qBAA4B,EAAA;KAC5CT,sBAAsB,EAAEU,6BAAqC,EAAA;IAC9D,CAAA;;;;;;;;;CCPD,EAAA,IAAMrG,OAAO,GAAGnD,cAAA,EAAoB,CAAA;GACpC,IAAMjB,aAAa,GAAGqG,eAA2B,CAAA;CACjD,EAAA,IACEnF,aAAa,GAeXwG,OAAoB,CAftBxG,aAAa;KACbE,wBAAwB,GActBsG,OAAoB,CAdtBtG,wBAAwB;KACxBD,qBAAqB,GAanBuG,OAAoB,CAbtBvG,qBAAqB;KACrBE,qBAAqB,GAYnBqG,OAAoB,CAZtBrG,qBAAqB;KACrBC,uBAAuB,GAWrBoG,OAAoB,CAXtBpG,uBAAuB;KACvBC,EAAE,GAUAmG,OAAoB,CAVtBnG,EAAE;KACFM,MAAM,GASJ6F,OAAoB,CATtB7F,MAAM;KACNU,kBAAkB,GAQhBmF,OAAoB,CARtBnF,kBAAkB;KAClBC,cAAc,GAOZkF,OAAoB,CAPtBlF,cAAc;KACdC,iBAAiB,GAMfiF,OAAoB,CANtBjF,iBAAiB;KACjBG,0BAA0B,GAKxB8E,OAAoB,CALtB9E,0BAA0B;KAC1BC,6BAA6B,GAI3B6E,OAAoB,CAJtB7E,6BAA6B;KAC7BH,WAAW,GAGTgF,OAAoB,CAHtBhF,WAAW;KACXC,WAAW,GAET+E,OAAoB,CAFtB/E,WAAW;KACXG,UAAU,GACR4E,OAAoB,CADtB5E,UAAU,CAAA;CAEZ,EAAA,IAAM4H,iBAAiB,GAAGL,iBAAA,EAAuB,CAAA;CAEjD,EAAA,IAAMM,cAAc,GAAGpH,MAAM,CAACe,MAAM,CAACF,OAAO,CAAC,CAAA;CAC7C,EAAA,IAAMa,kBAAkB,GAAGzC,cAAc,CAAC4B,OAAO,CAAC,CAAA;CAClD,EAAA,IAAMwG,yBAAyB,GAAGrH,MAAM,CAACsH,OAAO,CAACH,iBAAiB,CAAC,CAAA;CACnE,EAAA,IAAM7E,oBAAoB,GAAGpD,iBAAiB,CAACiI,iBAAiB,CAAC,CAAC;;CAGpDI,EAAAA,UAAA,GAAGC,UAAU,CAAA;;CAG3B;CACA;CACA;CACA;CACA;CACA;CACA;CACA;CACA;CACA;CACA;CACA;CACA;CACA;CACA;CACA;CACA;CACA;CACA;CACA;CACA;CACA;CACA;CACA;CACA;CACA;CACA;CACA;CACA;CACA;CACA;CACA,EAAA,SAASA,UAAUA,CAACnG,OAAO,EAAEqD,IAAI,EAAE;CACjC,IAAA,IAAG,CAAC1G,EAAE,CAACM,MAAM,CAAC+C,OAAO,CAAC,EAAE;OACtB,MAAM,IAAIM,SAAS,CACjBlF,aAAa,CAACI,wBAAwB,CACnC+E,OAAO,CAAC,SAAS,EAAE,SAAS,CAAC,CAC7BA,OAAO,CAAC,QAAQ,EAAE,QAAQ,CACnC,CAAK,CAAA;CACF,KAAA;CAED,IAAA,IAAG,CAACrC,UAAU,CAAC8B,OAAO,CAACG,EAAE,CAAC,IAAI,CAACrC,WAAW,CAACkC,OAAO,CAAC,EAAE;OACnD,MAAM,IAAIM,SAAS,CACjBlF,aAAa,CACVa,4BAA4B,CAC5BsE,OAAO,CAAC,QAAQ,EAAE,IAAI,CAAC,CACvBA,OAAO,CAAC,UAAU,EAAE,SAAS,CAAC,CAC9BA,OAAO,CAAC,QAAQ,EAAE,sBAAsB,CACjD,CAAK,CAAA;CACF,KAAA;CAED,IAAA,IAAGxC,WAAW,CAACiC,OAAO,CAACG,EAAE,CAAC,CAACZ,MAAM,KAAK,CAAC,IAAI,CAACzB,WAAW,CAACkC,OAAO,CAAC,EAAE;OAChE,MAAM,IAAIM,SAAS,CACjBlF,aAAa,CACVU,2BAA2B,CAC3ByE,OAAO,CAAC,QAAQ,EAAE,IAAI,CAAC,CACvBA,OAAO,CAAC,UAAU,EAAE,SAAS,CACtC,CAAK,CAAA;CACF,KAAA;CAED,IAAA,IAAG,OAAOP,OAAO,CAACoG,QAAQ,KAAK,WAAW,IAAI,OAAOpG,OAAO,CAACoG,QAAQ,KAAK,UAAU,EAAE;OACpF,MAAM,IAAI9F,SAAS,CACjBlF,aAAa,CACVa,4BAA4B,CAC5BsE,OAAO,CAAC,QAAQ,EAAE,UAAU,CAAC,CAC7BA,OAAO,CAAC,UAAU,EAAE,SAAS,CAAC,CAC9BA,OAAO,CAAC,QAAQ,EAAE,YAAY,CACvC,CAAK,CAAA;CACF,KAAA;CAED,IAAA,IAAGzC,WAAW,CAACkC,OAAO,CAAC,EAAE;OACvB,IAAI,CAACE,IAAI,GAAG,eAAe,CAAA;CAC5B,KAAA;CAED,IAAA,IAAI,CAACC,EAAE,GAAGH,OAAO,CAACG,EAAE,CAAA;KACpB,IAAI,CAACH,OAAO,GAAGA,OAAO,CAAA;CACtB,IAAA,IAAI,CAAC+F,cAAc,GAAG,IAAIM,GAAG,EAAE,CAAA;CAC/B,IAAA,IAAI,CAACP,iBAAiB,GAAG,IAAIO,GAAG,CAACL,yBAAyB,CAAC,CAAA;CAC3D,IAAA,IAAI,CAACxG,OAAO,GAAG,IAAI6G,GAAG,EAAE,CAAA;CACxB,IAAA,IAAI,CAACvG,UAAU,GAAG,IAAIuG,GAAG,EAAE,CAAA;CAAC,IAAA,IAAAC,SAAA,GAAAC,0BAAA,CAERR,cAAc,CAAA;OAAAS,KAAA,CAAA;CAAA,IAAA,IAAA;OAAlC,KAAAF,SAAA,CAAAG,CAAA,EAAAD,EAAAA,CAAAA,CAAAA,KAAA,GAAAF,SAAA,CAAAI,CAAA,EAAAC,EAAAA,IAAA,GAAoC;CAAA,QAAA,IAA1B9G,MAAM,GAAA2G,KAAA,CAAAxC,KAAA,CAAA;CACd,QAAA,IAAQ5E,IAAI,GAAiCS,MAAM,CAA3CT,IAAI;WAAEoB,IAAI,GAA2BX,MAAM,CAArCW,IAAI;WAAE2B,IAAI,GAAqBtC,MAAM,CAA/BsC,IAAI;WAAE1B,KAAK,GAAcZ,MAAM,CAAzBY,KAAK;WAAEC,OAAO,GAAKb,MAAM,CAAlBa,OAAO,CAAA;CAExC,QAAA,IAAI,CAACqF,cAAc,CAACa,GAAG,CAACxH,IAAI,EAAE;CAAEoB,UAAAA,IAAI,EAAJA,IAAI;CAAE2B,UAAAA,IAAI,EAAJA,IAAI;CAAE1B,UAAAA,KAAK,EAALA,KAAK;CAAEC,UAAAA,OAAO,EAAPA,OAAAA;CAAO,SAAE,CAAC,CAAA;CAE7D,QAAA,IAAG/D,EAAE,CAAA,UAAA,CAAS,CAACwF,IAAI,CAAC,EAAE;CACpBA,UAAAA,IAAI,CAAC,IAAI,CAACnC,OAAO,CAAC,CAAA;CACnB,SAAA;CACF,OAAA;CAAA,KAAA,CAAA,OAAA6G,GAAA,EAAA;OAAAP,SAAA,CAAA5D,CAAA,CAAAmE,GAAA,CAAA,CAAA;CAAA,KAAA,SAAA;CAAAP,MAAAA,SAAA,CAAAQ,CAAA,EAAA,CAAA;CAAA,KAAA;CAED,IAAA,IAAGnK,EAAE,CAACM,MAAM,CAACoG,IAAI,CAAC,EAAE;CAClB,MAAA,IAAI,CAAC0D,OAAO,CAAAlG,cAAA,CAAAA,cAAA,KAAMwC,IAAI,CAAA,EAAA,EAAA,EAAA;SAAE2D,OAAO,EAAEhH,OAAO,CAACG,EAAAA;CAAE,OAAA,CAAE,CAAC,CAAA;CAC/C,KAAA;KAED8G,UAAU,CAACjH,OAAO,CAAC,CAAA;CACrB,GAAA;;CAEA;CACA;CACA;CACA;CACA;CACA;CACA;CACA;CACA;CACA;CACA;CACA;CACA;CACA;CACA;CACA;CACA;CACA;CACA;CACA;GACAmG,UAAU,CAACvH,SAAS,CAACmI,OAAO,GAAG,SAASA,OAAOA,CAAC1D,IAAI,EAAE;CACpD,IAAA,IAAM6D,YAAY,GAAG,IAAI,CAAC7D,IAAI,CAAA;CAE9B,IAAA,IAAG1G,EAAE,CAACM,MAAM,CAACiK,YAAY,CAAC,IAAIvK,EAAE,CAACM,MAAM,CAACoG,IAAI,CAAC,EAAE;OAC7C,IAAI,CAACA,IAAI,GAAGpG,MAAM,CAACK,cAAc,CAAC4J,YAAY,EAAE7D,IAAI,CAAC,CAAA;CACzD,KAAG,MAAM;OACL,IAAI,CAACA,IAAI,GAAGA,IAAI,CAAA;CACjB,KAAA;CAED,IAAA,OAAO,IAAI,CAAA;IACZ,CAAA;;CAED;CACA;CACA;CACA;CACA;CACA;CACA;GACA8C,UAAU,CAACvH,SAAS,CAACuI,UAAU,GAAG,SAASA,UAAUA,CAAC9F,GAAG,EAAE;CACzD,IAAA,IAAM6F,YAAY,GAAG,IAAI,CAAC7D,IAAI,CAAA;CAE9B,IAAA,IAAG,CAAC1G,EAAE,CAACM,MAAM,CAACiK,YAAY,CAAC,EAAE;CAC3B,MAAA,OAAO,IAAI,CAAA;CACZ,KAAA;CAED,IAAA,IAAG7F,GAAG,EAAE;CACN,MAAA,OAAO,IAAI,CAACgC,IAAI,CAAChC,GAAG,CAAC,CAAA;CACzB,KAAG,MAAM;OACL,OAAO,IAAI,CAACgC,IAAI,CAAA;CACjB,KAAA;CAED,IAAA,OAAO,IAAI,CAAA;IACZ,CAAA;;CAED;CACA;CACA;CACA;CACA;GACA8C,UAAU,CAACvH,SAAS,CAACwI,OAAO,GAAG,SAASA,OAAOA,CAAC/F,GAAG,EAAE;CACnD,IAAA,IAAGA,GAAG,IAAI,IAAI,CAACgC,IAAI,EAAE;CACnB,MAAA,OAAO,OAAO,IAAI,CAACA,IAAI,CAAChC,GAAG,CAAC,KAAK,WAAW,GAAG,IAAI,CAACgC,IAAI,CAAChC,GAAG,CAAC,GAAG,IAAI,CAAA;CACxE,KAAG,MAAM;CACL,MAAA,OAAO,IAAI,CAACgC,IAAI,IAAI,IAAI,CAAA;CACzB,KAAA;IACF,CAAA;;CAED;CACA;CACA;CACA;CACA;CACA;CACA;GACA8C,UAAU,CAACvH,SAAS,CAACyI,SAAS,GAAG,SAASA,SAASA,CAACjI,IAAI,EAAEC,SAAS,EAAE;CACnED,IAAAA,IAAI,GAAGzC,EAAE,CAACQ,MAAM,CAACiC,IAAI,CAAC,GAAGA,IAAI,CAACE,IAAI,EAAE,CAACgI,WAAW,EAAE,GAAG,EAAE,CAAA;CACvDjI,IAAAA,SAAS,GAAG1C,EAAE,CAACQ,MAAM,CAACkC,SAAS,CAAC,GAAGA,SAAS,CAACC,IAAI,EAAE,CAACgI,WAAW,EAAE,GAAG,EAAE,CAAA;CAEtE,IAAA,IAAM3G,UAAU,GAAGhD,kBAAkB,CAACyB,IAAI,EAAEC,SAAS,CAAC,CAAA;KAEtD,IAAG,IAAI,CAACG,OAAO,CAACjC,GAAG,CAACoD,UAAU,CAAC,EAAE;CAC/B,MAAA,OAAO,IAAI,CAACnB,OAAO,CAAC+H,GAAG,CAAC5G,UAAU,CAAC,CAAA;CACvC,KAAG,MAAM;CACL,MAAA,OAAO,IAAI,CAAA;CACZ,KAAA;IACF,CAAA;;CAED;CACA;CACA;CACA;GACAwF,UAAU,CAACvH,SAAS,CAAC4I,UAAU,GAAG,SAASC,gBAAgBA,CAACxH,IAAI,EAAE;CAChEA,IAAAA,IAAI,GAAGtD,EAAE,CAACQ,MAAM,CAAC8C,IAAI,CAAC,GAAGA,IAAI,CAACqH,WAAW,EAAE,CAAChI,IAAI,EAAE,GAAG,EAAE,CAAA;CAEvD,IAAA,IAAME,OAAO,GAAG;OACd,SAAS,EAAA,IAAI,CAACuG,cAAc;OAC5B2B,KAAK,EAAE,IAAI,CAAClI,OAAAA;MACb,CAAA;KAED,IAAG,CAAC,OAAO,EAAE,SAAS,CAAC,CAACoB,QAAQ,CAACX,IAAI,CAAC,EAAE;OACtC,OAAOT,OAAO,CAACS,IAAI,CAAC,CAAA;CACxB,KAAG,MAAM;CACL,MAAA,OAAOT,OAAO,CAAA;CACf,KAAA;IACF,CAAA;;CAED;CACA;CACA;CACA;CACA;CACA;CACA;CACA;CACA;CACA;CACA;CACA;CACA;CACA;CACA;CACA;GACA2G,UAAU,CAACvH,SAAS,CAAC+I,SAAS,GAAG,SAASA,SAASA,CAAC9H,MAAM,EAAE;CAC1D,IAAA,IAAM+H,YAAY,GAAG5J,0BAA0B,CAAC6B,MAAM,EAAEQ,kBAAkB,CAAC,CAAA;CAE3E,IAAA,IAAYM,UAAU,GAAiCiH,YAAY,CAA7DxI,IAAI;OAAcoB,IAAI,GAA2BoH,YAAY,CAA3CpH,IAAI;OAAE2B,IAAI,GAAqByF,YAAY,CAArCzF,IAAI;OAAE1B,KAAK,GAAcmH,YAAY,CAA/BnH,KAAK;OAAEC,OAAO,GAAKkH,YAAY,CAAxBlH,OAAO,CAAA;CAElD,IAAA,IAAG,IAAI,CAACmH,UAAU,CAAClH,UAAU,CAAC,EAAE;OAC9B,MAAM,IAAIL,SAAS,CACjBlF,aAAa,CAACc,mBAAmB,CAC9BqE,OAAO,CAAC,UAAU,EAAE,WAAW,CAAC,CAChCA,OAAO,CAAC,OAAO,EAAEI,UAAU,CACpC,CAAK,CAAA;CACF,KAAA;CAED,IAAA,IAAI,CAACnB,OAAO,CAACoH,GAAG,CAACjG,UAAU,EAAE;CAAEH,MAAAA,IAAI,EAAJA,IAAI;CAAE2B,MAAAA,IAAI,EAAJA,IAAI;CAAE1B,MAAAA,KAAK,EAALA,KAAK;CAAEC,MAAAA,OAAO,EAAPA,OAAAA;CAAO,KAAE,CAAC,CAAA;CAE5D,IAAA,IAAG/D,EAAE,CAAA,UAAA,CAAS,CAACwF,IAAI,CAAC,EAAE;CACpBA,MAAAA,IAAI,CAAC,IAAI,CAAC2F,UAAU,EAAE,CAAC,CAAA;CACxB,KAAA;CAED,IAAA,OAAO,IAAI,CAAA;IACZ,CAAA;;CAED;CACA;CACA;CACA;CACA;CACA;CACA;CACA;CACA;GACA3B,UAAU,CAACvH,SAAS,CAACiJ,UAAU,GAAG,SAASA,UAAUA,CAACzI,IAAI,EAAEC,SAAS,EAAE;CACrE,IAAA,IAAG1C,EAAE,CAACQ,MAAM,CAACiC,IAAI,CAAC,EAAE;OAClBA,IAAI,GAAGA,IAAI,CAACE,IAAI,EAAE,CAACgI,WAAW,EAAE,CAAA;CAChCjI,MAAAA,SAAS,GAAG1C,EAAE,CAACQ,MAAM,CAACkC,SAAS,CAAC,GAAGA,SAAS,CAACC,IAAI,EAAE,CAACgI,WAAW,EAAE,GAAG,EAAE,CAAA;CAEtE,MAAA,IAAM3G,UAAU,GAAGhD,kBAAkB,CAACyB,IAAI,EAAEC,SAAS,CAAC,CAAA;CAEtD,MAAA,OAAO,IAAI,CAACG,OAAO,CAACjC,GAAG,CAACoD,UAAU,CAAC,CAAA;CACvC,KAAG,MAAM;CACL,MAAA,OAAO,IAAI,CAACnB,OAAO,CAACuI,IAAI,GAAG,CAAC,CAAA;CAC7B,KAAA;IACF,CAAA;;CAED;CACA;CACA;CACA;CACA;CACA;CACA;CACA;CACA;CACA;CACA;CACA;CACA;CACA;CACA;CACA;CACA;CACA5B,EAAAA,UAAU,CAACvH,SAAS,CAACoJ,YAAY,GAAG,SAASA,YAAYA,CAAClH,YAAY,EAAEC,WAAW,EAAEC,aAAa,EAAE;KAClGF,YAAY,GAAG7C,6BAA6B,CAAC6C,YAAY,EAAEC,WAAW,EAAEC,aAAa,EAAEC,oBAAoB,CAAC,CAAA;CAE5G,IAAA,IAAG,IAAI,CAACgH,YAAY,CAACnH,YAAY,CAAC,EAAE;OAClC,MAAM,IAAIR,SAAS,CACjBlF,aAAa,CAACc,mBAAmB,CAC9BqE,OAAO,CAAC,UAAU,EAAE,aAAa,CAAC,CAClCA,OAAO,CAAC,OAAO,EAAEO,YAAY,CACtC,CAAK,CAAA;CACF,KAAA;KAED,IAAI,CAAChB,UAAU,CAAC8G,GAAG,CAAC9F,YAAY,EAAEC,WAAW,CAAC,CAAA;CAE9C,IAAA,OAAO,IAAI,CAAA;IACZ,CAAA;;CAED;CACA;CACA;CACA;GACAoF,UAAU,CAACvH,SAAS,CAACsJ,aAAa,GAAG,SAASA,aAAaA,CAACjI,IAAI,EAAE;CAChEA,IAAAA,IAAI,GAAGtD,EAAE,CAACQ,MAAM,CAAC8C,IAAI,CAAC,GAAGA,IAAI,CAACqH,WAAW,EAAE,CAAChI,IAAI,EAAE,GAAG,EAAE,CAAA;CAEvD,IAAA,IAAMQ,UAAU,GAAG;OACjB,SAAS,EAAA,IAAI,CAACgG,iBAAiB;OAC/B4B,KAAK,EAAE,IAAI,CAAC5H,UAAAA;MACb,CAAA;KAED,IAAG,CAAC,OAAO,EAAE,SAAS,CAAC,CAACc,QAAQ,CAACX,IAAI,CAAC,EAAE;OACtC,OAAOH,UAAU,CAACG,IAAI,CAAC,CAAA;CAC3B,KAAG,MAAM;CACL,MAAA,OAAOH,UAAU,CAAA;CAClB,KAAA;IACF,CAAA;GAEDqG,UAAU,CAACvH,SAAS,CAACqJ,YAAY,GAAG,SAASA,YAAYA,CAACnH,YAAY,EAAE;CACtE,IAAA,IAAGnE,EAAE,CAACQ,MAAM,CAAC2D,YAAY,CAAC,EAAE;OAC1BA,YAAY,GAAGA,YAAY,CAACxB,IAAI,EAAE,CAACgI,WAAW,EAAE,CAAA;CACjD,KAAA;KAED,OACE3K,EAAE,CAACQ,MAAM,CAAC2D,YAAY,CAAC,GACnB,IAAI,CAAChB,UAAU,CAACvC,GAAG,CAACuD,YAAY,CAAC,GACjC,IAAI,CAAChB,UAAU,CAACiI,IAAI,GAAG,CAAC,CAAA;IAE/B,CAAA;;CAED;CACA;CACA;CACA;GACA5B,UAAU,CAACvH,SAAS,CAACkJ,UAAU,GAAG,SAASA,UAAUA,GAAG;KACtD,OAAO,IAAI,CAAC9H,OAAO,CAAA;IACpB,CAAA;;CAED;CACA;CACA;CACA;GACAmG,UAAU,CAACvH,SAAS,CAACwH,QAAQ,GAAG,SAASA,QAAQA,GAAG;KAAA,IAAA+B,WAAA,EAAAC,cAAA,CAAA;CAClD,IAAA,IAAIpE,KAAK,CAAA;CACT,IAAA,IAAI1B,KAAK,GAAG,IAAI,CAACwF,UAAU,EAAE,CAAA;CAE7B,IAAA,IAAG,OAAOxF,KAAK,CAAC8D,QAAQ,KAAK,UAAU,EAAE;CACvCpC,MAAAA,KAAK,GAAG1B,KAAK,CAAC8D,QAAQ,EAAE,CAAA;CACzB,KAAA,MAAM,IAAG,CAAA,CAAA+B,WAAA,GAAA7F,KAAK,CAACrC,IAAI,MAAA,IAAA,IAAAkI,WAAA,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAVA,WAAA,CAAYb,WAAW,EAAE,MAAK,UAAU,EAAE;OAClDtD,KAAK,GAAG1B,KAAK,CAAC0B,KAAK,CAAA;CACpB,KAAA,MAAM,IAAG,CAAA,CAAAoE,cAAA,GAAA9F,KAAK,CAAC+F,OAAO,MAAA,IAAA,IAAAD,cAAA,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAbA,cAAA,CAAed,WAAW,EAAE,MAAK,QAAQ,EAAE;CAAA,MAAA,IAAAgB,qBAAA,CAAA;OACnDtE,KAAK,GAAA,CAAAsE,qBAAA,GAAGC,kCAAkC,CAACjG,KAAK,CAAC,MAAAgG,IAAAA,IAAAA,qBAAA,KAAAA,KAAAA,CAAAA,IAAAA,CAAAA,qBAAA,GAAzCA,qBAAA,CAA2CtE,KAAK,MAAAsE,IAAAA,IAAAA,qBAAA,uBAAhDA,qBAAA,CAAkDhJ,IAAI,EAAE,CAAA;MACjE,MAAM,IAAG,OAAOgD,KAAK,CAAC0B,KAAK,KAAK,WAAW,EAAE;OAC5CA,KAAK,GAAG1B,KAAK,CAAC0B,KAAK,CAAA;CACvB,KAAG,MAAM,IAAG1B,KAAK,CAACkG,iBAAiB,IAAI,OAAOlG,KAAK,CAACmG,WAAW,KAAK,WAAW,EAAE;OAC7EzE,KAAK,GAAG1B,KAAK,CAACmG,WAAW,CAAA;CAC1B,KAAA;CAED,IAAA,OAAS9L,EAAE,CAACQ,MAAM,CAAC6G,KAAK,CAAC,GAAGA,KAAK,CAAC1E,IAAI,EAAE,GAAG0E,KAAK,CAAA;IACjD,CAAA;;CAED;CACA;CACA;GACAmC,UAAU,CAACvH,SAAS,CAAC8J,QAAQ,GAAG,SAASA,QAAQA,GAAG;CAClD,IAAA,IAAAC,mBAAA,GAA+D,IAAI,CAACT,aAAa,EAAE;CAAlEpC,MAAAA,iBAAiB,GAAA6C,mBAAA,CAAA,SAAA,CAAA;OAASC,eAAe,GAAAD,mBAAA,CAAtBjB,KAAK,CAAA;KACzC,IAAM5H,UAAU,GAAG1B,KAAK,CAACyK,IAAI,CAAC/C,iBAAiB,CAACpG,MAAM,EAAE,CAAC,CAACR,MAAM,CAACd,KAAK,CAACyK,IAAI,CAACD,eAAe,CAAClJ,MAAM,EAAE,CAAC,CAAC,CAAA;CAEtG,IAAA,IAAGI,UAAU,CAACP,MAAM,KAAK,CAAC,EAAE;CAC1B,MAAA,MAAM,IAAIe,SAAS,CAAClF,aAAa,CAACS,kBAAkB,CAAC,CAAA;CACtD,KAAA;CAED,IAAA,IAAAiN,gBAAA,GAAyD,IAAI,CAACtB,UAAU,EAAE;CAAzDzB,MAAAA,cAAc,GAAA+C,gBAAA,CAAA,SAAA,CAAA;OAASC,YAAY,GAAAD,gBAAA,CAAnBpB,KAAK,CAAA;KACtC,IAAMlI,OAAO,GAAGpB,KAAK,CAACyK,IAAI,CAAC9C,cAAc,CAACrG,MAAM,EAAE,CAAC,CAACR,MAAM,CAACd,KAAK,CAACyK,IAAI,CAACE,YAAY,CAACrJ,MAAM,EAAE,CAAC,CAAC,CAAA;CAE7F,IAAA,IAAGF,OAAO,CAACD,MAAM,KAAK,CAAC,EAAE;CACvB,MAAA,MAAM,IAAIe,SAAS,CAAClF,aAAa,CAACQ,eAAe,CAAC,CAAA;CACnD,KAAA;CAED,IAAA,IAAIyH,IAAI,GAAG,IAAI,CAAC+D,OAAO,EAAE,CAAA;CACzB,IAAA,IAAM9E,KAAK,GAAG,IAAI,CAACwF,UAAU,EAAE,CAAA;CAC/B,IAAA,IAAM9D,KAAK,GAAG,IAAI,CAACoC,QAAQ,EAAE,CAAA;KAC7B,IAAMf,MAAM,GAAG,EAAE,CAAA;KAEjB,IAAGhC,IAAI,CAACiC,QAAQ,IAAIhD,KAAK,CAACrC,IAAI,KAAK,UAAU,EAAE;CAC7CoF,MAAAA,MAAM,CAACG,OAAO,GAAGlD,KAAK,CAACkD,OAAO,CAAA;CAC/B,KAAA;KAED,IAAMnD,gBAAgB,GAAGvC,UAAU,CAACkJ,MAAM,CAAC,UAACzD,MAAM,EAAE0D,EAAE,EAAA;OAAA,OAAK1D,MAAM,IAAI0D,EAAE,CAACjF,KAAK,EAAEX,IAAI,EAAEkC,MAAM,EAAEF,MAAM,CAAC,CAAA;CAAA,KAAA,EAAE,IAAI,CAAC,CAAA;CAE3G7F,IAAAA,OAAO,CAAC0J,OAAO,CAAC,SAASC,4BAA4BA,CAAAC,IAAA,EAAqB;CAAA,MAAA,IAAlB3I,KAAK,GAAA2I,IAAA,CAAL3I,KAAK;SAAEC,OAAO,GAAA0I,IAAA,CAAP1I,OAAO,CAAA;CACpE,MAAA,IAAG2B,gBAAgB,EAAE;SACnB5B,KAAK,CAAC6B,KAAK,CAAC,CAAA;CAClB,OAAK,MAAM;SACL5B,OAAO,CAAC4B,KAAK,CAAC,CAAA;CACf,OAAA;CACL,KAAG,CAAC,CAAA;CAEF,IAAA,OAAOD,gBAAgB,CAAA;IACxB,CAAA;;CAED;CACA;CACA;CACA;CACA;GACA8D,UAAU,CAACvH,SAAS,CAACyK,KAAK,GAAG,SAASA,KAAKA,CAACC,QAAQ,EAAE;CAAA,IAAA,IAAAC,KAAA,GAAA,IAAA,CAAA;CACpD,IAAA,IAAMjH,KAAK,GAAG,IAAI,CAACwF,UAAU,EAAE,CAAA;CAC/B,IAAA,IAAI0B,WAAW,CAAA;KAEf,QAAOlH,KAAK,CAACrC,IAAI;CACjB,MAAA,KAAK,UAAU;CAAGuJ,QAAAA,WAAW,GAAG,OAAO,CAAA;CAAE,QAAA,MAAA;CACzC,MAAA,KAAK,OAAO,CAAA;CACZ,MAAA,KAAK,UAAU,CAAA;CACf,MAAA,KAAK,MAAM,CAAA;CACX,MAAA;CAAkBA,QAAAA,WAAW,GAAG,OAAO,CAAA;CAAE,QAAA,MAAA;CACxC,KAAA;CAEDlH,IAAAA,KAAK,CAACmH,gBAAgB,CAACD,WAAW,EAAE,YAAA;CAAA,MAAA,OAAMD,KAAI,CAACb,QAAQ,CAACtD,CAAC,EAAEkE,QAAQ,CAAC,CAAA;CAAA,KAAA,CAAC,CAAC;IACvE,CAAA;;GAEDnD,UAAU,CAACvH,SAAS,CAAC8K,KAAK,GAAG,SAASA,KAAKA,GAAG;CAC5C,IAAA,IAAM1J,OAAO,GAAG,IAAI,CAAC8H,UAAU,EAAE,CAAA;CACjC,IAAA,IAAA6B,iBAAA,GAAyD,IAAI,CAACnC,UAAU,EAAE;CAAzDzB,MAAAA,cAAc,GAAA4D,iBAAA,CAAA,SAAA,CAAA;OAASZ,YAAY,GAAAY,iBAAA,CAAnBjC,KAAK,CAAA;KACtC,IAAMlI,OAAO,GAAGpB,KAAK,CAACyK,IAAI,CAAC9C,cAAc,CAACrG,MAAM,EAAE,CAAC,CAACR,MAAM,CAACd,KAAK,CAACyK,IAAI,CAACE,YAAY,CAACrJ,MAAM,EAAE,CAAC,CAAC,CAAA;CAE7FM,IAAAA,OAAO,CAAC8B,SAAS,CAACC,MAAM,CAACzF,aAAa,CAAC,CAAA;CACvC0D,IAAAA,OAAO,CAAC8B,SAAS,CAACC,MAAM,CAACvF,wBAAwB,CAAC,CAAA;CAClDwD,IAAAA,OAAO,CAAC8B,SAAS,CAACC,MAAM,CAACxF,qBAAqB,CAAC,CAAA;CAC/CyD,IAAAA,OAAO,CAAC8B,SAAS,CAACC,MAAM,CAACtF,qBAAqB,CAAC,CAAA;CAC/CuD,IAAAA,OAAO,CAAC8B,SAAS,CAACC,MAAM,CAACrF,uBAAuB,CAAC,CAAA;KAEjDuK,UAAU,CAACjH,OAAO,CAAC,CAAA;CAEnB,IAAA,IAAGR,OAAO,CAACD,MAAM,GAAG,CAAC,EAAE;CACrBC,MAAAA,OAAO,CAAC0J,OAAO,CAAC,SAASU,YAAYA,CAAC/J,MAAM,EAAE;CAC5C,QAAA,IAAGlD,EAAE,CAAS,UAAA,CAAA,CAACkD,MAAM,CAACsC,IAAI,CAAC,EAAE;CAC3BtC,UAAAA,MAAM,CAACsC,IAAI,CAACnC,OAAO,CAAC,CAAA;CACrB,SAAA;CACP,OAAK,CAAC,CAAA;CACH,KAAA;IACF,CAAA;;CAGD;;GAEA,SAASuI,kCAAkCA,CAACsB,aAAa,EAAE;KACzD,OAAO;OACL7F,KAAK,EAAG6F,aAAa,CAAC7F,KAAK;OAC3B8F,IAAI,EAAID,aAAa,CAACE,OAAO,CAACF,aAAa,CAACG,aAAa,CAAC,CAACF,IAAAA;MAC5D,CAAA;CACH,GAAA;GAEA,SAAS7C,UAAUA,CAAC3E,KAAK,EAAE;KAAA,IAAA2H,gBAAA,EAAAC,iBAAA,CAAA;CACzB,IAAA,CAAAD,gBAAA,GAAA3H,KAAK,CAACR,SAAS,MAAA,IAAA,IAAAmI,gBAAA,KAAA,KAAA,CAAA,IAAfA,gBAAA,CAAiBjI,GAAG,CAAC1F,aAAa,CAAC,CAAA;CACnC,IAAA,CAAA4N,iBAAA,GAAA5H,KAAK,CAACR,SAAS,MAAA,IAAA,IAAAoI,iBAAA,KAAA,KAAA,CAAA,IAAfA,iBAAA,CAAiBlI,GAAG,CAACzF,qBAAqB,CAAC,CAAA;CAC7C,GAAA;;;;;;;;;GCteA,IAAMnB,aAAa,GAAGiB,eAA4B,CAAA;CAClD,EAAA,IAAQM,EAAE,GAA2C8E,OAAqB,CAAlE9E,EAAE;KAAEmB,WAAW,GAA8B2D,OAAqB,CAA9D3D,WAAW;KAAEC,WAAW,GAAiB0D,OAAqB,CAAjD1D,WAAW;KAAEG,UAAU,GAAKuD,OAAqB,CAApCvD,UAAU,CAAA;CAChD,EAAA,IAAMiI,UAAU,GAAGrD,iBAAA,EAAyB,CAAA;;CAE5C;CACA;CACA;CACA;CACA;CACA;CACA;CACA;CACA;CACA;CACA;CACA;CACA;CACA;CACA;CACA;CACA;CACA;CACA;CACA;CACA;CACA;CACA;CACAqH,EAAAA,QAAc,GAAG,SAASA,QAAQA,CAAC7H,KAAK,EAAEe,IAAI,EAAE;CAC9C,IAAA,IAAG,OAAOf,KAAK,KAAK,QAAQ,EAAE;CAC5BA,MAAAA,KAAK,GAAG8H,QAAQ,CAACC,cAAc,CAAC/H,KAAK,CAAC,CAAA;CACvC,KAAA;CAED,IAAA,IAAG,CAAC3F,EAAE,CAACM,MAAM,CAACqF,KAAK,CAAC,EAAE;OACpB,MAAM,IAAIhC,SAAS,CACjBlF,aAAa,CAACI,wBAAwB,CACnC+E,OAAO,CAAC,SAAS,EAAE,OAAO,CAAC,CAC3BA,OAAO,CAAC,QAAQ,EAAE,QAAQ,CACnC,CAAK,CAAA;CACF,KAAA;CAED,IAAA,IAAG,CAACrC,UAAU,CAACoE,KAAK,CAACnC,EAAE,CAAC,IAAI,CAACrC,WAAW,CAACwE,KAAK,CAAC,EAAE;OAC/C,MAAM,IAAIhC,SAAS,CACjBlF,aAAa,CAACa,4BAA4B,CACvCsE,OAAO,CAAC,QAAQ,EAAE,IAAI,CAAC,CACvBA,OAAO,CAAC,UAAU,EAAE,OAAO,CAAC,CAC5BA,OAAO,CAAC,QAAQ,EAAE,sBAAsB,CACjD,CAAK,CAAA;CACF,KAAA;CAED,IAAA,IAAMsB,KAAK,GAAG,IAAI,CAACyI,QAAQ,CAACvM,WAAW,CAACuE,KAAK,CAACnC,EAAE,CAAC,CAAC,CAAA;CAElD,IAAA,IAAG0B,KAAK,EAAE;CACR,MAAA,IAAGlF,EAAE,CAACM,MAAM,CAACoG,IAAI,CAAC,EAAE;CAClBA,QAAAA,IAAI,CAACxB,KAAK,GAAGS,KAAK,CAACnC,EAAE,CAAA;CAErB,QAAA,IAAI,CAAC4G,OAAO,CAAC1D,IAAI,CAAC,CAAA;CACnB,OAAA;CACL,KAAG,MAAM;CACL,MAAA,IAAI,CAACkH,MAAM,CAACC,IAAI,CAAC,IAAIrE,UAAU,CAAC7D,KAAK,EAAEe,IAAI,CAAC,CAAC,CAAA;CAC9C,KAAA;CAED,IAAA,OAAO,IAAI,CAAA;IACZ,CAAA;;;;;;;;;CC9DD,EAAA,IAAQ1G,EAAE,GAAKN,OAAqB,CAA5BM,EAAE,CAAA;;CAEV;CACA;CACA;CACA;CACA;CACA;CACA;CACA;CACA;CACA;CACA;CACA;CACA;CACA;CACA;CACA;CACA;CACA;CACA;CACA;CACA;CACA8N,EAAAA,SAAc,GAAG,SAASA,SAASA,CAACF,MAAM,EAAE;CAAA,IAAA,IAAAhB,KAAA,GAAA,IAAA,CAAA;CAC1C,IAAA,IAAG5M,EAAE,CAACC,KAAK,CAAC2N,MAAM,CAAC,IAAIA,MAAM,CAAChL,MAAM,GAAG,CAAC,EAAE;CACxCgL,MAAAA,MAAM,CAACrB,OAAO,CAAC,UAAArH,KAAK,EAAA;SAAA,OAAI0H,KAAI,CAACY,QAAQ,CAACtI,KAAK,CAACA,KAAK,EAAEA,KAAK,CAACwB,IAAI,CAAC,CAAA;QAAC,CAAA,CAAA;CAChE,KAAA;CAED,IAAA,OAAO,IAAI,CAAA;IACZ,CAAA;;;;;;;;;GC7BD,IAAMjI,aAAa,GAAGiB,eAA4B,CAAA;CAClD,EAAA,IAAQM,EAAE,GAAa8E,OAAqB,CAApC9E,EAAE;KAAEM,MAAM,GAAKwE,OAAqB,CAAhCxE,MAAM,CAAA;;CAGlB;CACA;CACA;CACA;CACA;CACA;CACA;CACA;CACA;CACA;CACA;CACA;CACA;CACA;CACA;CACA;CACA;CACA8J,EAAAA,OAAc,GAAG,SAASA,OAAOA,CAAC1D,IAAI,EAAE;CACtC,IAAA,IAAG,CAAC1G,EAAE,CAACM,MAAM,CAACoG,IAAI,CAAC,EAAE;OACnB,MAAM,IAAI/C,SAAS,CACjBlF,aAAa,CAACI,wBAAwB,CACnC+E,OAAO,CAAC,SAAS,EAAE,MAAM,CAAC,CAC1BA,OAAO,CAAC,QAAQ,EAAE,QAAQ,CACnC,CAAK,CAAA;CACF,KAAA;KAED,IAAG,CAACtD,MAAM,CAACM,GAAG,CAAC8F,IAAI,EAAE,OAAO,CAAC,EAAE;OAC7B,MAAM,IAAI/C,SAAS,CACjBlF,aAAa,CAACW,sBAAsB,CACjCwE,OAAO,CAAC,SAAS,EAAE,MAAM,CAAC,CAC1BA,OAAO,CAAC,QAAQ,EAAE,OAAO,CAClC,CAAK,CAAA;CACF,KAAA;CAED,IAAA,IAAMyG,OAAO,GAAGrK,EAAE,CAACM,MAAM,CAACoG,IAAI,CAACxB,KAAK,CAAC,GAAGwB,IAAI,CAACxB,KAAK,CAAC1B,EAAE,GAAGkD,IAAI,CAACxB,KAAK,CAAA;CAClE,IAAA,IAAMA,KAAK,GAAG,IAAI,CAACyI,QAAQ,CAACtD,OAAO,CAAC,CAAA;KAEpC,IAAG,CAACnF,KAAK,EAAE;OACT,MAAM,IAAIvB,SAAS,CACjBlF,aAAa,CAACG,kBAAkB,CAC7BgF,OAAO,CAAC,WAAW,EAAE,WAAW,CAAC,CACjCA,OAAO,CAAC,MAAM,EAAEyG,OAAO,CAChC,CAAK,CAAA;CACF,KAAA;CAEDnF,IAAAA,KAAK,CAACkF,OAAO,CAAC1D,IAAI,CAAC,CAAA;CAEnB,IAAA,OAAO,IAAI,CAAA;IACZ,CAAA;;;;;;;;;GCpDD,IAAMjI,aAAa,GAAGiB,eAA4B,CAAA;CAClD,EAAA,IAAQwB,iBAAiB,GAAoC4D,OAAqB,CAA1E5D,iBAAiB;KAAEI,6BAA6B,GAAKwD,OAAqB,CAAvDxD,6BAA6B,CAAA;CACxD,EAAA,IAAM6H,iBAAiB,GAAGhD,iBAAA,EAAwB,CAAA;CAElD,EAAA,IAAM7B,oBAAoB,GAAGpD,iBAAiB,CAACiI,iBAAiB,CAAC,CAAC;;GAGpDkC,YAAA,GAAG,SAASA,YAAYA,CAAClH,YAAY,EAAEC,WAAW,EAAEC,aAAa,EAAE;KAC/E,IAAI,CAAClB,UAAU,GAAG,IAAI,CAACA,UAAU,IAAI,EAAE,CAAA;KAEvCgB,YAAY,GAAG7C,6BAA6B,CAAC6C,YAAY,EAAEC,WAAW,EAAEC,aAAa,EAAEC,oBAAoB,CAAC,CAAA;CAE5G,IAAA,IAAG,IAAI,CAACnB,UAAU,CAACgB,YAAY,CAAC,EAAE;OAChC,MAAM,IAAIR,SAAS,CACjBlF,aAAa,CAACc,mBAAmB,CAC9BqE,OAAO,CAAC,UAAU,EAAE,aAAa,CAAC,CAClCA,OAAO,CAAC,OAAO,EAAEO,YAAY,CACtC,CAAK,CAAA;CACF,KAAA;CAED,IAAA,IAAI,CAAChB,UAAU,CAACgB,YAAY,CAAC,GAAGC,WAAW,CAAA;;CAE7C;CACE,IAAA,IAAG,OAAO,IAAI,CAAC2J,SAAS,KAAK,UAAU,EAAE;OACvC,IAAI,CAACA,SAAS,EAAE,CAACxB,OAAO,CAAC,UAAArH,KAAK,EAAI;CAChC,QAAA,IAAG,CAAEA,KAAK,CAACoG,YAAY,CAACnH,YAAY,CAAE,EAAE;WACtCe,KAAK,CAACmG,YAAY,CAAClH,YAAY,EAAEC,WAAW,EAAEC,aAAa,CAAC,CAAA;CAC7D,SAAA;CACP,OAAK,CAAC,CAAA;CACH,KAAA;IACF,CAAA;;;;;;;;;CC9BD,EAAA,IAAMxB,OAAO,GAAGnD,cAAA,EAAqB,CAAA;CACrC,EAAA,IAAQM,EAAE,GAAK8E,OAAqB,CAA5B9E,EAAE,CAAA;GAEV,IAAMoJ,cAAc,GAAG,EAAE,CAAA;CAEzB,EAAA,KAAA,IAAA4E,EAAA,GAAAC,CAAAA,EAAAA,cAAA,GAAoBjM,MAAM,CAACe,MAAM,CAACF,OAAO,CAAC,EAAAmL,EAAA,GAAAC,cAAA,CAAArL,MAAA,EAAAoL,EAAA,EAAE,EAAA;CAAxC,IAAA,IAAM9K,MAAM,GAAA+K,cAAA,CAAAD,EAAA,CAAA,CAAA;CACd,IAAA,IAAQvL,IAAI,GAAiCS,MAAM,CAA3CT,IAAI;OAAEoB,IAAI,GAA2BX,MAAM,CAArCW,IAAI;OAAE2B,IAAI,GAAqBtC,MAAM,CAA/BsC,IAAI;OAAE1B,KAAK,GAAcZ,MAAM,CAAzBY,KAAK;OAAEC,OAAO,GAAKb,MAAM,CAAlBa,OAAO,CAAA;KAExCqF,cAAc,CAAC3G,IAAI,CAAC,GAAG;CAAEoB,MAAAA,IAAI,EAAJA,IAAI;CAAE2B,MAAAA,IAAI,EAAJA,IAAI;CAAE1B,MAAAA,KAAK,EAALA,KAAK;CAAEC,MAAAA,OAAO,EAAPA,OAAAA;MAAS,CAAA;CACvD,GAAA;;CAEA;CACA;CACA;CACA;CACA8G,EAAAA,UAAc,GAAG,SAASA,UAAUA,CAACvH,IAAI,EAAE;CACzCA,IAAAA,IAAI,GAAGtD,EAAE,CAACQ,MAAM,CAAC8C,IAAI,CAAC,GAAGA,IAAI,CAACX,IAAI,EAAE,CAACgI,WAAW,EAAE,GAAG,EAAE,CAAA;CAEvD,IAAA,IAAMyB,YAAY,GAAG,IAAI,CAACvJ,OAAO,IAAI,IAAI,CAAA;KAEzC,IAAG,CAAC,OAAO,EAAE,SAAS,CAAC,CAACoB,QAAQ,CAACX,IAAI,CAAC,EAAE;CACtC,MAAA,QAAOA,IAAI;CACX,QAAA,KAAK,SAAS;CAAE,UAAA,OAAO8F,cAAc,CAAA;CACrC,QAAA,KAAK,OAAO;CAAI,UAAA,OAAOgD,YAAY,CAAA;CAClC,OAAA;CACL,KAAG,MAAM;OACL,OAAO;CACL,QAAA,SAAA,EAAShD,cAAc;CACvB2B,QAAAA,KAAK,EAAEqB,YAAAA;QACR,CAAA;CACF,KAAA;IACF,CAAA;;;;;;;;;CC/BD,EAAA,IAAQhL,WAAW,GAAK1B,OAAqB,CAArC0B,WAAW,CAAA;CAGnBuM,EAAAA,QAAc,GAAG,SAASA,QAAQA,CAACtD,OAAO,EAAE;KAC1C,OAAO,IAAI,CAAC0D,SAAS,EAAE,CAACG,IAAI,CAAC,UAAAhJ,KAAK,EAAA;OAAA,OAAI9D,WAAW,CAAC8D,KAAK,CAAC1B,EAAE,CAAC,KAAKpC,WAAW,CAACiJ,OAAO,CAAC,CAAA;CAAA,KAAA,CAAC,IAAI,IAAI,CAAA;IAC9F,CAAA;;;;;;;;;;;;;CCDa0D,EAAAA,SAAA,GAAG,SAASA,SAASA,GAAG;KACpC,OAAO,IAAI,CAACH,MAAM,CAAA;IACnB,CAAA;;;;;;;;;CCND,EAAA,IAAMzK,UAAU,GAAGzD,iBAAA,EAAwB,CAAA;CAC3C,EAAA,IAAQM,EAAE,GAAK8E,OAAqB,CAA5B9E,EAAE,CAAA;GAEV,IAAMmJ,iBAAiB,GAAG,EAAE,CAAA;CAE5B,EAAA,KAAA,IAAA6E,EAAA,GAAAG,CAAAA,EAAAA,eAAA,GAA8BnM,MAAM,CAACsH,OAAO,CAACnG,UAAU,CAAC,EAAA6K,EAAA,GAAAG,eAAA,CAAAvL,MAAA,EAAAoL,EAAA,EAAE,EAAA;CAAtD,IAAA,IAAAI,kBAAA,GAAArG,cAAA,CAAAoG,eAAA,CAAAH,EAAA,CAAA,EAAA,CAAA,CAAA;CAAOtJ,MAAAA,GAAG,GAAA0J,kBAAA,CAAA,CAAA,CAAA;CAAEC,MAAAA,SAAS,GAAAD,kBAAA,CAAA,CAAA,CAAA,CAAA;CACvBjF,IAAAA,iBAAiB,CAACzE,GAAG,CAAC,GAAG2J,SAAS,CAAA;CACpC,GAAA;;CAEA;CACA;CACA;CACA;CACA9C,EAAAA,aAAc,GAAG,SAAS+C,YAAYA,CAAChL,IAAI,EAAE;CAC3CA,IAAAA,IAAI,GAAGtD,EAAE,CAACQ,MAAM,CAAC8C,IAAI,CAAC,GAAGA,IAAI,CAACX,IAAI,EAAE,CAACgI,WAAW,EAAE,GAAG,EAAE,CAAA;CAEvD,IAAA,IAAMsB,eAAe,GAAG,IAAI,CAAC9I,UAAU,IAAI,IAAI,CAAA;KAE/C,IAAG,CAAC,OAAO,EAAE,SAAS,CAAC,CAACc,QAAQ,CAACX,IAAI,CAAC,EAAE;CACtC,MAAA,QAAOA,IAAI;CACX,QAAA,KAAK,SAAS;CAAE,UAAA,OAAO6F,iBAAiB,CAAA;CACxC,QAAA,KAAK,OAAO;CAAI,UAAA,OAAO8C,eAAe,CAAA;CACrC,OAAA;CACL,KAAG,MAAM;OACL,OAAO;CACL,QAAA,SAAA,EAAS9C,iBAAiB;CAC1B4B,QAAAA,KAAK,EAAEkB,eAAAA;QACR,CAAA;CACF,KAAA;IACF,CAAA;;;;;;;;;CC7BD,EAAA,IAAQjM,EAAE,GAAKN,OAAqB,CAA5BM,EAAE,CAAA;;CAGV;CACA;CACA;CACA;CACA;CACA;CACA;CACA;CACAwK,EAAAA,UAAc,GAAG,SAASA,UAAUA,CAACnH,OAAO,EAAEqB,GAAG,EAAE;CACjD,IAAA,IAAM2F,OAAO,GAAGrK,EAAE,CAACM,MAAM,CAAC+C,OAAO,CAAC,GAAGA,OAAO,CAACG,EAAE,GAAGH,OAAO,CAAA;CACzD,IAAA,IAAM6B,KAAK,GAAG,IAAI,CAACyI,QAAQ,CAACtD,OAAO,CAAC,CAAA;CAEpC,IAAA,IAAGnF,KAAK,EAAE;CACRA,MAAAA,KAAK,CAACsF,UAAU,CAAC9F,GAAG,CAAC,CAAA;CACtB,KAAA;CAED,IAAA,OAAO,IAAI,CAAA;IACZ,CAAA;;;;;;;;;CCpBaqI,EAAAA,KAAA,GAAG,SAASA,KAAKA,GAAG;CAChC,IAAA,IAAG,OAAO,IAAI,CAACgB,SAAS,KAAK,UAAU,EAAE;OACvC,IAAI,CAACA,SAAS,EAAE,CAACxB,OAAO,CAAC,SAASgC,UAAUA,CAACrJ,KAAK,EAAE;SAClDA,KAAK,CAAC6H,KAAK,EAAE,CAAA;CACnB,OAAK,CAAC,CAAA;CACH,KAAA;IACF,CAAA;;;;;;;;;;;;;CCFayB,EAAAA,MAAA,GAAG,SAASA,MAAMA,GAAG;CACjC,IAAA,OAAO,IAAI,CAACT,SAAS,EAAE,CAAA;IACxB,CAAA;;;;;;;;;CCND,EAAA,IAAMlL,OAAO,GAAGnD,cAAA,EAAqB,CAAA;GACrC,IAAMjB,aAAa,GAAGqG,eAA4B,CAAA;CAClD,EAAA,IAAQ7D,cAAc,GAAiCkF,OAAqB,CAApElF,cAAc;KAAEI,0BAA0B,GAAK8E,OAAqB,CAApD9E,0BAA0B,CAAA;CAElD,EAAA,IAAMqC,kBAAkB,GAAGzC,cAAc,CAAC4B,OAAO,CAAC,CAAA;;CAElD;CACA;CACA;CACA;CACA;CACA;CACA;CACA;CACA;CACA;CACA;CACA;CACA;CACA;CACA;CACAmI,EAAAA,SAAc,GAAG,SAASA,SAASA,CAAC9H,MAAM,EAAE;KAC1C,IAAI,CAACL,OAAO,GAAG,IAAI,CAACA,OAAO,IAAI,EAAE,CAAA;CAEjC,IAAA,IAAMoI,YAAY,GAAG5J,0BAA0B,CAAC6B,MAAM,EAAEQ,kBAAkB,CAAC,CAAA;CAE3E,IAAA,IAAYM,UAAU,GAAiCiH,YAAY,CAA7DxI,IAAI;OAAcoB,IAAI,GAA2BoH,YAAY,CAA3CpH,IAAI;OAAE2B,IAAI,GAAqByF,YAAY,CAArCzF,IAAI;OAAE1B,KAAK,GAAcmH,YAAY,CAA/BnH,KAAK;OAAEC,OAAO,GAAKkH,YAAY,CAAxBlH,OAAO,CAAA;CAElD,IAAA,IAAG,IAAI,CAAClB,OAAO,CAACmB,UAAU,CAAC,EAAE;OAC3B,MAAM,IAAIL,SAAS,CACjBlF,aAAa,CAACc,mBAAmB,CAC9BqE,OAAO,CAAC,UAAU,EAAE,WAAW,CAAC,CAChCA,OAAO,CAAC,OAAO,EAAEI,UAAU,CACpC,CAAK,CAAA;CACF,KAAA;CAED,IAAA,IAAI,CAACnB,OAAO,CAACmB,UAAU,CAAC,GAAG;CAAEH,MAAAA,IAAI,EAAJA,IAAI;CAAE2B,MAAAA,IAAI,EAAJA,IAAI;CAAE1B,MAAAA,KAAK,EAALA,KAAK;CAAEC,MAAAA,OAAO,EAAPA,OAAAA;MAAS,CAAA;;CAE3D;CACE,IAAA,IAAG,OAAO,IAAI,CAACgK,SAAS,KAAK,UAAU,EAAE;OACvC,IAAI,CAACA,SAAS,EAAE,CAACxB,OAAO,CAAC,SAASkC,sBAAsBA,CAACvJ,KAAK,EAAE;CAAA,QAAA,IAAAwJ,YAAA,CAAA;SAC9D,IAAG,CAAExJ,KAAK,CAACgG,UAAU,CAAChI,MAAM,CAACT,IAAI,EAAAiM,CAAAA,YAAA,GAAExL,MAAM,CAACW,IAAI,MAAA6K,IAAAA,IAAAA,YAAA,uBAAXA,YAAA,CAAahM,SAAS,CAAE,EAAE;CAC3DwC,UAAAA,KAAK,CAAC8F,SAAS,CAAC9H,MAAM,CAAC,CAAA;CACxB,SAAA;CACP,OAAK,CAAC,CAAA;CACH,KAAA;IACF,CAAA;;;;;;;;;CC9CD,EAAA,IAAQ/B,WAAW,GAAKzB,OAAqB,CAArCyB,WAAW,CAAA;;CAGnB;CACA;CACA;CACc4K,EAAAA,QAAA,GAAG,SAASA,QAAQA,GAAG;CACnC,IAAA,IAAM6B,MAAM,GAAG,IAAI,CAACG,SAAS,EAAE,CAAA;KAC/B,IAAMY,YAAY,GAAGf,MAAM,CAACgB,MAAM,CAAC,SAASC,qBAAqBA,CAAC3J,KAAK,EAAE;OACvE,OAAO,CAAC/D,WAAW,CAAC+D,KAAK,CAACiG,UAAU,EAAE,CAAC,CAAA;CAC3C,KAAG,CAAC,CAAA;KAEF,IAAM2D,SAAS,GAAGH,YAAY,CAAC1L,GAAG,CAAC,SAAS8L,aAAaA,CAAC7J,KAAK,EAAE;CAC/D,MAAA,OAAOA,KAAK,CAAC6G,QAAQ,EAAE,CAAA;CAC3B,KAAG,CAAC,CAAA;KAEF,OAAO+C,SAAS,CAACE,KAAK,CAAC,SAASC,qBAAqBA,CAACrG,MAAM,EAAE;OAC5D,OAAOnE,OAAO,CAACmE,MAAM,CAAC,CAAA;CAC1B,KAAG,CAAC,CAAA;IACH,CAAA;;;;;;;;;GCnBD,IAAMnK,aAAa,GAAGiB,eAA4B,CAAA;;CAGlD;CACA;CACA;CACA;CACA;CACA;CACA;CACA;CACA;CACA;CACA;CACA;CACA;CACA;CACA;CACA;CACAgN,EAAAA,KAAc,GAAG,SAASwC,kBAAkBA,CAACvC,QAAQ,EAAE;CAAA,IAAA,IAAAwC,YAAA,CAAA;KACrD,IAAIC,SAAS,GAAG,KAAK,CAAA;KACrB,IAAMC,IAAI,GAAG,IAAI,CAACA,IAAI,IAAI,IAAI,CAAC;CAC/B,IAAA,IAAMzB,MAAM,GAAG,IAAI,CAACG,SAAS,EAAE,CAAA;CAC/B,IAAA,IAAMuB,WAAW,GAAG1B,MAAM,CAACgB,MAAM,CAAC,UAAAzE,CAAC,EAAA;CAAA,MAAA,OAAI,CAAEvF,cAAc,CAACuF,CAAC,CAAE,CAAA;MAAC,CAAA,CAAA;CAC5D,IAAA,IAAMoF,YAAY,GAAAJ,CAAAA,YAAA,GAAGvB,MAAM,CAACM,IAAI,CAACtJ,cAAc,CAAC,cAAAuK,YAAA,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAA3BA,YAAA,CAA6BhE,UAAU,EAAE,CAAA;CAC9D,IAAA,IAAMqE,KAAK,GAAGF,WAAW,CAACrM,GAAG,CAAC,UAAAiC,KAAK,EAAA;CAAA,MAAA,OAAIT,OAAO,CAACS,KAAK,CAACuF,OAAO,EAAE,CAAC,CAAA;MAAC,CAAA,CAAA;KAEhE,IAAMgF,YAAY,GAAG,IAAI,CAACC,WAAW,CAAC7E,UAAU,EAAE,CAAC;CACnD,IAAA,IAAM8E,eAAe,GAAG,IAAI,CAAC9E,UAAU,EAAE,CAAA;KACzC,IAAMhI,OAAO,GAAGb,MAAM,CAACI,MAAM,CAAC,EAAE,EAC9BqN,YAAY,CAAA,SAAA,CAAQ,EAAEA,YAAY,CAAC1E,KAAK,EACxC4E,eAAe,WAAQ,EAAEA,eAAe,CAAC5E,KAC7C,CAAG,CAAA;CACD,IAAA,IAAM6E,SAAS,GAAG5N,MAAM,CAACe,MAAM,CAACF,OAAO,CAAC,CAAA;CACxC,IAAA,IAAMgN,kBAAkB,GAAGC,qBAAqB,EAAE,CAAA;CAElDR,IAAAA,WAAW,CAAC/C,OAAO,CAAC,SAASwD,YAAYA,CAAC7K,KAAK,EAAE;CAC/C,MAAA,IAAMS,KAAK,GAAGT,KAAK,CAACiG,UAAU,EAAE,CAAA;CAEhCxF,MAAAA,KAAK,CAACmH,gBAAgB,CAACkD,gBAAgB,CAACrK,KAAK,CAAC,EAAEsK,kBAAkB,CAAC/K,KAAK,EAAES,KAAK,CAAC,CAAC,CAAA;CACrF,KAAG,CAAC,CAAA;KAEF,OAAO;OACL7B,KAAK,EAAE,SAAAA,KAAA,GAAA;CAAA,QAAA,OAAMsL,SAAS,CAAA;CAAA,OAAA;MACvB,CAAA;;CAEH;CACA;CACA;CACA;CACA;CACE,IAAA,SAASa,kBAAkBA,CAAC/K,KAAK,EAAES,KAAK,EAAE;OACxC,OAAO,SAASuK,kBAAkBA,GAAG;CACnC,QAAA,IAAMpM,KAAK,GAAGoB,KAAK,CAAC6G,QAAQ,EAAE,CAAA;SAC9B,IAAMoE,eAAe,GAAGN,kBAAkB,CAAC3K,KAAK,EAAEpB,KAAK,EAAE0L,KAAK,CAAC,CAAA;SAE/DJ,SAAS,GAAGe,eAAe,CAACf,SAAS,CAAA;CAErC,QAAA,IAAG,OAAOzC,QAAQ,KAAK,UAAU,EAAE;CACjCA,UAAAA,QAAQ,CAAChH,KAAK,EAAE7B,KAAK,CAAC,CAAA;WAEtB,IAAGqM,eAAe,CAACC,kBAAkB,EAAE;CACrCzD,YAAAA,QAAQ,CAAC0C,IAAI,EAAED,SAAS,CAAC,CAAA;CAC1B,WAAA;CACF,SAAA;CAEDiB,QAAAA,YAAY,CAACjB,SAAS,EAAEQ,SAAS,EAAEL,YAAY,CAAC,CAAA;QACjD,CAAA;CACF,KAAA;IACF,CAAA;;CAGD;CACA,EAAA,SAASc,YAAYA,CAAC3K,gBAAgB,EAAE7C,OAAO,EAAE0M,YAAY,EAAE;CAC7D,IAAA,IAAG1M,OAAO,CAACD,MAAM,KAAK,CAAC,EAAE;CACvB,MAAA,MAAM,IAAIe,SAAS,CAAClF,aAAa,CAACQ,eAAe,CAAC,CAAA;CACnD,KAAA;CAED4D,IAAAA,OAAO,CAAC0J,OAAO,CAAC,UAAAE,IAAA,EAAwB;CAAA,MAAA,IAArB3I,KAAK,GAAA2I,IAAA,CAAL3I,KAAK;SAAEC,OAAO,GAAA0I,IAAA,CAAP1I,OAAO,CAAA;CAC/B,MAAA,IAAG2B,gBAAgB,EAAE;SACnB5B,KAAK,CAACyL,YAAY,CAAC,CAAA;CACzB,OAAK,MAAM;SACLxL,OAAO,CAACwL,YAAY,CAAC,CAAA;CACtB,OAAA;CACL,KAAG,CAAC,CAAA;CACJ,GAAA;GAEA,SAAS3K,cAAcA,CAAC2E,UAAU,EAAE;CAClC,IAAA,OAAOA,UAAU,CAAChG,IAAI,KAAK,eAAe,CAAA;CAC5C,GAAA;;CAEA;CACA;CACA;CACA;CACA;GACA,SAASyM,gBAAgBA,CAACrK,KAAK,EAAE;CAC/B,IAAA,IAAIkH,WAAW,CAAA;KAEf,QAAOlH,KAAK,CAACrC,IAAI;CACjB,MAAA,KAAK,UAAU;CAAGuJ,QAAAA,WAAW,GAAG,OAAO,CAAA;CAAE,QAAA,MAAA;CACzC,MAAA,KAAK,OAAO,CAAA;CACZ,MAAA,KAAK,UAAU,CAAA;CACf,MAAA,KAAK,MAAM,CAAA;CACX,MAAA;CAAkBA,QAAAA,WAAW,GAAG,OAAO,CAAA;CAAE,QAAA,MAAA;CACxC,KAAA;CAED,IAAA,OAAOA,WAAW,CAAA;CACpB,GAAA;;CAEA;CACA;CACA;CACA;CACA;CACA;CACA;CACA;CACA;GACA,SAASiD,qBAAqBA,GAAG;KAC/B,IAAIQ,eAAe,GAAG,EAAE,CAAA;KAExB,OAAO,SAAST,kBAAkBA,CAAC3K,KAAK,EAAEpB,KAAK,EAAE0L,KAAK,EAAE;OACtD,IAAIJ,SAAS,GAAG,KAAK,CAAA;OACrB,IAAIgB,kBAAkB,GAAG,KAAK,CAAA;CAE9BE,MAAAA,eAAe,CAACpL,KAAK,CAAC1B,EAAE,CAAC,GAAG8M,eAAe,CAACpL,KAAK,CAAC1B,EAAE,CAAC,IAAI,EAAE,CAAA;OAC3D8M,eAAe,CAACpL,KAAK,CAAC1B,EAAE,CAAC,CAACM,KAAK,GAAGA,KAAK,CAAA;CAEvC,MAAA,IAAG9B,MAAM,CAACoB,IAAI,CAACkN,eAAe,CAAC,CAAC1N,MAAM,KAAK4M,KAAK,CAAC5M,MAAM,EAAE;CACvDwN,QAAAA,kBAAkB,GAAG,IAAI,CAAA;SACzBhB,SAAS,GAAGpN,MAAM,CAACe,MAAM,CAACuN,eAAe,CAAC,CAACtB,KAAK,CAAC,UAAA9J,KAAK,EAAA;WAAA,OAAIA,KAAK,CAACpB,KAAK,CAAA;UAAC,CAAA,CAAA;CACvE,OAAA;OAED,OAAO;CAAEsL,QAAAA,SAAS,EAATA,SAAS;CAAEgB,QAAAA,kBAAkB,EAAlBA,kBAAAA;QAAoB,CAAA;MACzC,CAAA;CACH,GAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;CCxIA,IAAM3R,eAAa,GAAGiB,eAA4B,CAAA;CAClD,IAAQqB,mBAAmB,GAAK+D,OAAqB,CAA7C/D,mBAAmB,CAAA;CAE3B,IAAMwP,mBAAmB,GAAG,CAC1B,UAAU,EACV,WAAW,EACX,SAAS,EACT,cAAc,EACd,eAAe,EACf,YAAY,EACZ,UAAU,EACV,WAAW,EACX,YAAY,EACZ,OAAO,EACP,QAAQ,EACR,WAAW,EACX,UAAU,EACV,OAAO,CACR,CAAA;CAED,IAAMC,iBAAiB,GAAG,CAAC,YAAY,EAAE,WAAW,CAAC,CAAA;CAErD,IAAAC,OAAc,GAAG;CACfC,EAAAA,iBAAiB,EAAjBA,mBAAiB;CACjBC,EAAAA,eAAe,EAAfA,iBAAAA;CACF,CAAC,CAAA;;CAGD;CACA;CACA;CACA;CACA;CACA,SAASD,mBAAiBA,CAACE,IAAI,EAAEC,UAAU,EAAE;CAC3C,EAAA,IAAG,OAAOD,IAAI,KAAK,UAAU,EAAE;KAC7B,MAAM,IAAIjN,SAAS,CACjBlF,eAAa,CAACI,wBAAwB,CACnC+E,OAAO,CAAC,SAAS,EAAE,MAAM,CAAC,CAC1BA,OAAO,CAAC,QAAQ,EAAE,wBAAwB,CACnD,CAAK,CAAA;CACF,GAAA;CAED,EAAA,IAAG,CAAC2M,mBAAmB,CAACtM,QAAQ,CAAC4M,UAAU,CAAC,EAAE;CAC5C,IAAA,MAAM,IAAIlN,SAAS,CACjBlF,eAAa,CAACgB,WAAW,CACtBmE,OAAO,CAAC,QAAQ,EAAE,iBAAiB,CAAC,CACpCA,OAAO,CAAC,YAAY,EAAEiN,UAAU,CAAC,CACjCjN,OAAO,CAAC,SAAS,EAAE,SAAS,CAAC,CAC7BA,OAAO,CAAC,gBAAgB,EAAE7C,mBAAmB,CAACwP,mBAAmB,CAAC,CAC3E,CAAK,CAAA;CACF,GAAA;CAEDK,EAAAA,IAAI,CAAC3O,SAAS,CAAC4O,UAAU,CAAC,GAAGC,qBAAAA,CAAAA,cAAAA,CAAO,CAAAvO,IAAAA,CAAAA,MAAA,CAAMsO,UAAU,CAAE,CAAC,CAAA;CACzD,CAAA;;CAEA;CACA;CACA;CACA;CACA;CACA,SAASF,iBAAeA,CAACC,IAAI,EAAEC,UAAU,EAAE;CACzC,EAAA,IAAG,OAAOD,IAAI,KAAK,UAAU,EAAE;KAC7B,MAAM,IAAIjN,SAAS,CACjBlF,eAAa,CAACI,wBAAwB,CACnC+E,OAAO,CAAC,SAAS,EAAE,MAAM,CAAC,CAC1BA,OAAO,CAAC,QAAQ,EAAE,wBAAwB,CACnD,CAAK,CAAA;CACF,GAAA;CAED,EAAA,IAAG,CAAC4M,iBAAiB,CAACvM,QAAQ,CAAC4M,UAAU,CAAC,EAAE;CAC1C,IAAA,MAAM,IAAIlN,SAAS,CACjBlF,eAAa,CAACgB,WAAW,CACtBmE,OAAO,CAAC,QAAQ,EAAE,eAAe,CAAC,CAClCA,OAAO,CAAC,YAAY,EAAEiN,UAAU,CAAC,CACjCjN,OAAO,CAAC,SAAS,EAAE,SAAS,CAAC,CAC7BA,OAAO,CAAC,gBAAgB,EAAE7C,mBAAmB,CAACyP,iBAAiB,CAAC,CACzE,CAAK,CAAA;CACF,GAAA;CAEDI,EAAAA,IAAI,CAACC,UAAU,CAAC,GAAGC,qBAAO,CAAA,cAAA,CAAA,CAAAvO,IAAAA,CAAAA,MAAA,CAAMsO,UAAU,CAAE,CAAC,CAAA;CAC/C;;CC9EA,IAAMpS,aAAa,GAAGiB,eAA2B,CAAA;CACjD,IAAQM,EAAE,GAA8B8E,OAAoB,CAApD9E,EAAE;GAAEmB,WAAW,GAAiB2D,OAAoB,CAAhD3D,WAAW;GAAEI,UAAU,GAAKuD,OAAoB,CAAnCvD,UAAU,CAAA;CACnC,IAAQmP,mBAAiB,GAAsBvK,OAAoB,CAA3DuK,iBAAiB;GAAEC,iBAAe,GAAKxK,OAAoB,CAAxCwK,eAAe,CAAA;CAE1C,IAAMI,eAAa,GAAG,CAAC,YAAY,EAAE,WAAW,CAAC,CAAA;CACjD,IAAMC,iBAAe,GAAG,CACtB,SAAS,EAAE,YAAY,EAAE,UAAU,EAAE,WAAW,EAChD,YAAY,EAAE,OAAO,EAAE,WAAW,EAAE,QAAQ,EAAE,UAAU,EAAE,OAAO,CAClE,CAAA;KAGDC,SAAc,GAAGC,WAAS,CAAA;;CAG1B;CACA;CACA;CACA;CACA;CACA;CACA;CACA;CACA;CACA;CACA;CACA;CACA;CACA;CACA;CACA;CACA;CACA;CACA;CACA;CACA;CACA;CACA;CACA,SAASA,WAASA,CAAC7B,IAAI,EAAEG,KAAK,EAAE;CAAA,EAAA,IAAA5C,KAAA,GAAA,IAAA,CAAA;CAC9B,EAAA,IAAG,OAAOyC,IAAI,KAAK,QAAQ,EAAE;KAC3BA,IAAI,GAAG5B,QAAQ,CAACC,cAAc,CAAC2B,IAAI,CAAC1M,IAAI,EAAE,CAAC,CAAA;CAC5C,GAAA;CAED,EAAA,IAAG,CAAC3C,EAAE,CAACM,MAAM,CAAC+O,IAAI,CAAC,EAAE;KACnB,MAAM,IAAI1L,SAAS,CACjBlF,aAAa,CAACM,mBAAmB,CAC9B6E,OAAO,CAAC,SAAS,EAAE,MAAM,CAAC,CAC1BA,OAAO,CAAC,eAAe,EAAE,MAAM,CACxC,CAAK,CAAA;CACF,GAAA;GAED,IAAI,CAACyL,IAAI,GAAGA,IAAI,CAAA;GAChB,IAAI,CAACzB,MAAM,GAAG,EAAE,CAAA;CAChB,EAAA,IAAMuD,QAAQ,GAAG9B,IAAI,CAAC8B,QAAQ,CAAA;CAE9B,EAAA,IAAGA,QAAQ,EAAE;KACX1P,KAAK,CAACyK,IAAI,CAACiF,QAAQ,CAAC,CAAC5E,OAAO,CAAC,UAAA5G,KAAK,EAAI;OACpC,IAAGpE,UAAU,CAACoE,KAAK,CAACnC,EAAE,CAAC,IAAIrC,WAAW,CAACwE,KAAK,CAAC,EAAE;CAC7CiH,QAAAA,KAAI,CAACY,QAAQ,CAAC7H,KAAK,CAAC,CAAA;CACrB,OAAA;CACP,KAAK,CAAC,CAAA;CACH,GAAA;CAED,EAAA,IAAG3F,EAAE,CAACC,KAAK,CAACuP,KAAK,CAAC,EAAE;CACtB;CACA;CACIA,IAAAA,KAAK,CAACjD,OAAO,CAAC,UAAA7F,IAAI,EAAI;CACpB,MAAA,IAAMf,KAAK,GAAG0J,IAAI,CAAC+B,aAAa,CAAA,GAAA,CAAA7O,MAAA,CAAKmE,IAAI,CAAC2D,OAAO,CAAE,CAAC,CAAA;OAEpD,IAAG1E,KAAK,IAAIiH,KAAI,CAACe,QAAQ,CAAChI,KAAK,CAACnC,EAAE,CAAC,EAAE;CACnCoJ,QAAAA,KAAI,CAACxC,OAAO,CAAC1D,IAAI,CAAC,CAAA;CACnB,OAAA;CACP,KAAK,CAAC,CAAA;CACH,GAAA;CACH,CAAA;AAEAwK,YAAS,CAACjP,SAAS,CAACuL,QAAQ,GAAG,SAASA,QAAQA,CAACnK,OAAO,EAAEqD,IAAI,EAAE;CAC9D,EAAA,IAAM2K,YAAY,GAAG5P,KAAK,CAACyK,IAAI,CAAC,IAAI,CAACmD,IAAI,CAAC8B,QAAQ,CAAC,CAAClO,GAAG,CAAC,UAAAqO,EAAE,EAAA;KAAA,OAAIA,EAAE,CAAC9N,EAAE,CAAA;IAAC,CAAA,CAAA;GAEpE,IAAG6N,YAAY,CAACpN,QAAQ,CAACZ,OAAO,CAACG,EAAE,CAAC,EAAE;KACpCsF,eAAA,EAA6B,CAAC3G,IAAI,CAAC,IAAI,EAAEkB,OAAO,EAAEqD,IAAI,CAAC,CAAA;CACxD,GAAA;CAED,EAAA,OAAO,IAAI,CAAA;CACb,CAAC,CAAA;AAEDqK,gBAAa,CAACxE,OAAO,CAAC,SAASgF,iBAAiBA,CAACC,MAAM,EAAE;CACvDb,EAAAA,iBAAe,CAACO,WAAS,EAAEM,MAAM,CAAC,CAAA;CACpC,CAAC,CAAC,CAAA;AAEFR,kBAAe,CAACzE,OAAO,CAAC,SAASkF,oBAAoBA,CAACD,MAAM,EAAE;CAC5Dd,EAAAA,mBAAiB,CAACQ,WAAS,EAAEM,MAAM,CAAC,CAAA;CACtC,CAAC,CAAC;;CC3FF,IAAQd,iBAAiB,GAAsBhR,OAAoB,CAA3DgR,iBAAiB;GAAEC,eAAe,GAAKjR,OAAoB,CAAxCiR,eAAe,CAAA;CAC1C,IAAMO,SAAS,GAAGpM,SAAuB,CAAA;CAEzC,IAAMiM,aAAa,GAAG,CAAC,YAAY,EAAE,WAAW,CAAC,CAAA;CACjD,IAAMC,eAAe,GAAG,CACtB,UAAU,EAAE,WAAW,EAAE,SAAS,EAAE,YAAY,EAAE,cAAc,EAAE,eAAe,EACjF,UAAU,EAAE,WAAW,EAAE,YAAY,EAAE,OAAO,EAAE,WAAW,EAAE,QAAQ,EAAE,UAAU,EAAE,OAAO,CAC3F,CAAA;KAGDU,kBAAc,GAAGC,oBAAkB,CAAA;CAGnC,SAASA,oBAAkBA,GAAG;GAC5B,IAAI,CAAC/D,MAAM,GAAG,EAAE,CAAA;GAChB,IAAI,CAACyB,IAAI,GAAG,IAAI,CAAA;CAClB,CAAA;;CAEA;CACA;CACA;CACA;CACA;CACA;CACA;CACA;CACA;CACA;CACA;CACA;CACA;CACA;CACA;CACA;CACA;CACA;CACA;CACA;CACA;CACA;CACA;AACAsC,qBAAkB,CAAC1P,SAAS,CAAC2P,OAAO,GAAG,SAASA,OAAOA,CAACvC,IAAI,EAAEG,KAAK,EAAE;GACnE,IAAMyB,SAAS,GAAG,IAAIC,SAAS,CAAC7B,IAAI,EAAEG,KAAK,CAAC,CAAA;CAE5C,EAAA,IAAI,CAACH,IAAI,GAAG4B,SAAS,CAAC5B,IAAI,CAAA;CAE1B,EAAA,OAAO4B,SAAS,CAAA;CAClB,CAAC,CAAA;CAEDF,aAAa,CAACxE,OAAO,CAAC,SAASgF,iBAAiBA,CAACC,MAAM,EAAE;CACvDb,EAAAA,eAAe,CAACgB,oBAAkB,EAAEH,MAAM,CAAC,CAAA;CAC7C,CAAC,CAAC,CAAA;CAEFR,eAAe,CAACzE,OAAO,CAAC,SAASkF,oBAAoBA,CAACD,MAAM,EAAE;CAC5Dd,EAAAA,iBAAiB,CAACiB,oBAAkB,EAAEH,MAAM,CAAC,CAAA;CAC/C,CAAC,CAAC;;CCvDF,IAAMG,kBAAkB,GAAGjS,kBAAiC,CAAA;CAE5D,IAAAmS,GAAc,GAAGF,kBAAkB,CAAA;;;;;;;;;"}